{"version":3,"sources":["../node_modules/peerjs/dist sync","components/LandingPage.jsx","components/Connection.js","components/popup.jsx","components/MeetWindow.jsx","App.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","LandingPage","props","useState","roomId","setRoom","Fragment","class","Box","boxShadow","Card","className","CardContent","align","Grid","container","spacing","item","xs","direction","TextField","variant","color","type","value","inputProps","style","padding","onChange","target","m","pt","Button","onClick","Axios","get","cors","origin","methods","then","res","data","link","maxWidth","maxHeight","minWidth","minHeight","history","push","SocketConnection","ENDPOINT","peers","videoContainer","currentStream","mediaRecorder","screenShareStatus","screenPresenter","currentScreenShareID","recordedChunks","this","updatevalue","peer","Peer","socket","io","console","log","socketEvent","PeerEvent","document","getElementById","display","on","ID","screenShareView","sharingId","DestId","userId","setTimeout","screenShareRevert","Id","removeuser","userName","message","messageBody","setlocalstream","emit","err","alert","reconnect","connectToUser","stream","call","metadata","externalstream","addstream","peerConnection","Call","answer","getvideoaudio","localstream","setPeerListenres","newUserConnection","catch","name","videostatus","micstatus","navigator","mediaDevices","getUserMedia","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","video","audio","videogrid","localcontainer","createElement","srcObject","autoplay","muted","appendChild","append","close","remove","getVideoTracks","enabled","micStatus","getAudioTracks","mediaStream","pause","tmp","play","toggle","getDisplayMedia","cursor","echoCancellation","noiseSuppression","onended","stopscreen","Object","entries","getSenders","map","sender","track","kind","length","replaceTrack","recordStatus","MediaRecorder","startrecording","endrecording","ondataavailable","event","size","onstop","blob","Blob","url","URL","createObjectURL","a","href","today","Date","dateTime","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","download","body","click","removeChild","window","revokeObjectURL","start","stop","newmessage","username","disconnect","getTracks","forEach","element","UserPopup","popupToggle","setPopupToggle","userDetails","setUserDetails","handleSubmit","submitHandle","Dialog","disableBackdropClick","onClose","open","Paper","onKeyUp","DialogTitle","required","title","label","placeholder","memo","socketInstance","msgCount","MeetWindow","location","pathname","substring","setMic","videoStatus","setCam","setRecord","setScreen","screenPresenterStatus","setpresenter","React","anchorEl","setAnchorEl","Boolean","setName","useEffect","createSocketConnectionInstance","toast","configure","deleteMessages","addLinkSnippet","property","val","videotoggle","updateNewMessage","newuserjoined","renderCustomComponent","Reply","setBadgeCount","newUser","toLocaleTimeString","isWidgetOpened","handleNewUserMessage","Message","broadcastmessage","subtitle","autofocus","showTimeStamp","newuserChat","AppBar","position","Toolbar","mictoggle","exitcall","textField","innerText","select","execCommand","copyToClipboard","info","POSITION","TOP_CENTER","IconButton","aria-label","aria-controls","aria-haspopup","currentTarget","Menu","keepMounted","TransitionComponent","Fade","MenuItem","screenSharetoggle","recordScreen","App","path","exact","component","ReactDOM","render"],"mappings":"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","file":"static/js/main.b7a9c49e.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 188;","import React, {useState} from 'react';\r\nimport Axios from 'axios';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Grid from '@material-ui/core/Grid'\r\n\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport './card.css';\r\n\r\nimport Box from '@material-ui/core/Box';\r\nconst LandingPage= (props)=> {\r\n      const [roomId, setRoom] = useState('');\r\n      const createroom = ()=> {\r\n        Axios.get('https://engage-video-app.herokuapp.com/',{\r\n          cors: {\r\n            origin: \"https://engage-video-app.herokuapp.com/\",\r\n            methods: [\"GET\", \"POST\"]\r\n          }\r\n        }).then((res) =>{\r\n          setRoom(res.data.link);\r\n          \r\n      });\r\n        };\r\n      \r\n      const handlejoin=()=>{\r\n        if(roomId)\r\n        {\r\n          props.history.push(`/${roomId}`);\r\n        }\r\n       \r\n      }\r\n      \r\n     \r\n\r\n      return (<React.Fragment><div class=\"outer\">\r\n      <div class=\"middle\">\r\n        <div class=\"inner\">\r\n        <Box\r\n        boxShadow={3}>\r\n        <Card className=\"center card\">\r\n      <CardContent align=\"center\">\r\n     \r\n      <br/>\r\n      <br/>\r\n      <Grid container spacing={2} >\r\n  <Grid container item xs={6} direction=\"column\" >\r\n  <h3>Create new room</h3>\r\n  \r\n  <div> <TextField variant=\"outlined\" color=\"white\" type=\"text\"  value={roomId} inputProps={{\r\n       style: {\r\n         padding: 7\r\n       }\r\n    }} onChange={(e) =>{setRoom(e.target.value) }}/> </div>\r\n  \r\n \r\n  <Box m={2} pt={3}>\r\n  <div><Button variant=\"contained\" color=\"primary\"  onClick={createroom} style={{maxWidth: '200px', maxHeight: '30px', minWidth: '30px', minHeight: '10px'}}> Create Room</Button></div>\r\n</Box>\r\n  </Grid>\r\n  <Grid container item xs={6} direction=\"column\" >\r\n  <h3>Join existing one by pasting the code !</h3>\r\n  <Box m={2} pt={6}>\r\n  <div><Button variant=\"contained\" color=\"primary\" onClick={handlejoin} style={{maxWidth: '200px', maxHeight: '30px', minWidth: '30px', minHeight: '10px'}} > Join Room</Button></div> \r\n  </Box>\r\n  </Grid>\r\n</Grid>\r\n    \r\n     \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      </CardContent>\r\n      </Card>\r\n      </Box>\r\n        </div>\r\n      </div>\r\n    </div>\r\n     \r\n     \r\n     \r\n      </React.Fragment>\r\n      )\r\n};\r\n\r\nexport default LandingPage;\r\n/*\r\n\r\n\r\n <div className=\"alignement-card\" >\r\n<Link onClick={event => (!roomId) ? event.preventDefault(): null} to={{ pathname: `/${roomId}`,\r\n      roomdetails: {room:{roomId} } }}>\r\n       <input type=\"text\" name='value' value={roomId} onChange={(e) =>{setRoom(e.target.value) }} />\r\n      */","import io from 'socket.io-client';\r\nimport Peer from 'peerjs';\r\n\r\n\r\nclass SocketConnection {\r\n    ENDPOINT='https://engage-video-app.herokuapp.com/';\r\n   // peer= new Peer();\r\n    peers={};\r\n    videoContainer={};\r\n    currentStream=null;\r\n    mediaRecorder=null;\r\n    screenShareStatus=true;\r\n    screenPresenter=false;\r\n    currentScreenShareID=null;\r\n    recordedChunks=[];\r\n    constructor(props)\r\n    {   this.updatevalue=props.updatevalue;\r\n        this.roomId=props.roomId;\r\n        this.peer=new Peer();\r\n        this.socket=io(this.ENDPOINT);\r\n        console.log('inside the connection :'+props.roomId);\r\n        this.socketEvent();\r\n        this.PeerEvent();\r\n        document.getElementById('screen-share').style.display = \"none\";\r\n       \r\n        \r\n    }\r\n\r\n    socketEvent()\r\n    {\r\n        this.socket.on('screen-share',(ID)=>{\r\n            console.log('screen-share view for:',ID);\r\n            this.currentScreenShareID=ID;\r\n            this.screenShareStatus=!this.screenShareStatus;\r\n            this.updatevalue('screenShareStatus',this.screenShareStatus);\r\n           this.screenShareView(ID,this.videoContainer[ID]);\r\n        })\r\n        this.socket.on('screen-share-newUser',(sharingId,DestId)=>{\r\n            if(DestId===this.userId)\r\n            {\r\n                this.currentScreenShareID=sharingId;\r\n                this.screenShareStatus=!this.screenShareStatus;\r\n                this.updatevalue('screenShareStatus',this.screenShareStatus);\r\n                console.log(\"replace video ID for new user\",sharingId);\r\n               \r\n                   setTimeout(()=>{ if(this.videoContainer[sharingId]){this.screenShareView(sharingId,this.videoContainer[sharingId])}},1000);\r\n               \r\n                \r\n            }\r\n        })\r\n        this.socket.on('normal-view',(ID)=>{\r\n            console.log('REvert view for:',ID);\r\n            this.screenShareStatus=!this.screenShareStatus;\r\n            this.updatevalue('screenShareStatus',this.screenShareStatus);\r\n            this.currentScreenShareID=null;\r\n            this.screenShareRevert(ID);\r\n        })\r\n\r\n        this.socket.on('user-left',(Id)=>{\r\n            if(this.currentScreenShareID===Id)\r\n            { this.screenShareStatus=!this.screenShareStatus;\r\n                this.updatevalue('screenShareStatus',this.screenShareStatus);\r\n                this.currentScreenShareID=null;\r\n                this.screenShareRevert(Id);\r\n            }\r\n            this.removeuser(Id);\r\n        })\r\n\r\n        this.socket.on('new-message',(userName,message)=>{\r\n          \r\n            this.updatevalue('Incomingmessage',{userName:userName, messageBody:message});  \r\n           \r\n        })\r\n\r\n        this.socket.on('newuserName',(userName)=>{\r\n            this.updatevalue('newuserName',{userName:userName,messageBody: ' joined chat'});\r\n        })\r\n        this.socket.on('userleftchat',(userName)=>{\r\n            this.updatevalue('newuserName',{userName:userName,messageBody: ' left chat'});\r\n        })\r\n       \r\n    }\r\n\r\n    PeerEvent()\r\n    {\r\n       \r\n        this.peer.on('open',(id) =>{\r\n            this.userId=id;\r\n            console.log('generated userId: '+id);\r\n            this.setlocalstream();\r\n            console.log(\"emitting joining room request\")\r\n            setTimeout(()=>{this.socket.emit('joining-room', this.roomId, id)},1500);\r\n               \r\n       });\r\n\r\n\r\n       this.peer.on('error',(err)=>{\r\n           console.log('reconnecting to peer',err);\r\n           alert(\"Check your internet connection and re-try\");\r\n           this.peer.reconnect();\r\n       });\r\n      \r\n        \r\n    }\r\n\r\n    newUserConnection()\r\n    {\r\n        this.socket.on('user-joined',(Id)=>{\r\n           \r\n            console.log(\"joined use:\"+Id);\r\n          \r\n            if(this.screenPresenter)\r\n            {\r\n                this.socket.emit('screen-share-newUser',this.userId,Id);\r\n                console.log('screen-share req sent for new user');\r\n            }\r\n                this.connectToUser(this.currentStream,Id);\r\n            \r\n            \r\n            \r\n        });\r\n      \r\n\r\n    }\r\n    connectToUser(stream,Id)\r\n        {\r\n       \r\n            const call=this.peer.call(Id,stream,{ metadata: { userId: this.userId } });\r\n            this.peer.on('error',(err)=>{\r\n                console.log(\"ERROR\"+err);\r\n            })\r\n            console.log('made call to '+ Id+ 'stream');\r\n            call.on('stream',(externalstream)=>{\r\n                console.log('connteced user returned stream');\r\n                this.addstream(externalstream,Id);\r\n            })\r\n           \r\n            this.peers[Id]=call.peerConnection;\r\n          \r\n        }\r\n   \r\n    \r\n    setPeerListenres(stream)\r\n    {\r\n        console.log('peerlisteners set');\r\n        this.peer.on('call', (Call) =>{\r\n           \r\n            Call.answer(stream);\r\n            Call.on('stream',(externalstream)=>{\r\n             console.log('incoming stream');\r\n             this.peers[Call.metadata.userId]=Call.peerConnection;\r\n                this.addstream(externalstream,Call.metadata.userId);\r\n            })\r\n          \r\n        })\r\n    }\r\n\r\n\r\n    setlocalstream()\r\n    { \r\n        \r\n       this.getvideoaudio(true,true).then((stream)=> {\r\n         this.localstream=stream;\r\n         this.currentStream=stream;\r\n        this.addstream(stream,this.userId);\r\n        this.setPeerListenres(this.currentStream);\r\n        this.newUserConnection();\r\n      })\r\n      .catch(function(err) { console.log(err.name + \": \" + err.message); });\r\n     \r\n    }\r\n\r\n\r\n    getvideoaudio(videostatus,micstatus)\r\n    {\r\n        const myNavigator = navigator.mediaDevices.getUserMedia || navigator.mediaDevices.webkitGetUserMedia || navigator.mediaDevices.mozGetUserMedia || navigator.mediaDevices.msGetUserMedia;\r\n        return myNavigator({video:videostatus,audio :micstatus});\r\n    }\r\n    \r\n    \r\n    addstream(stream,Id)\r\n   {\r\n       if(!this.videoContainer[Id])\r\n       {\r\n        const videogrid=document.getElementById('video-grid');\r\n      \r\n        this.videoContainer[Id]=stream;\r\n        const localcontainer = document.createElement('div');\r\n        const video = document.createElement('video');\r\n        video.srcObject =stream;\r\n        video.id=Id;\r\n        video.autoplay = true;\r\n        if (this.userId === Id) video.muted = true;\r\n        localcontainer.appendChild(video)\r\n        videogrid.append(localcontainer);\r\n        console.log(\"done creating video :\"+Id);\r\n       \r\n        \r\n       }\r\n      \r\n   }\r\n\r\n   removeuser(Id)\r\n   {\r\n    if(this.peers[Id])this.peers[Id].close();\r\n    delete this.videoContainer[Id];\r\n    const video = document.getElementById(Id);\r\n    if (video) video.remove();\r\n    delete this.peers[Id];\r\n    \r\n\r\n   }\r\n   \r\n\r\n\r\n   videotoggle(videostatus)\r\n   {\r\n       if(this.localstream)\r\n       {\r\n        this.localstream.getVideoTracks()[0].enabled =!videostatus; \r\n        this.updatevalue('videoStatus',!videostatus);\r\n       }\r\n   \r\n   }\r\n\r\n\r\n   mictoggle(micStatus)\r\n   {\r\n       if(this.localstream)\r\n       {    \r\n        this.localstream.getAudioTracks()[0].enabled =!micStatus;\r\n        this.updatevalue('micStatus',!micStatus);\r\n\r\n       }\r\n    \r\n   }\r\n\r\n   screenShareView(Id,mediaStream)\r\n   {\r\n    var video = document.getElementById(Id);\r\n          if(video)\r\n          {\r\n            video.pause();\r\n            video.style.display=\"none\";\r\n         \r\n          }\r\n        const tmp=document.getElementById('screen-share');\r\n        tmp.style.display=\"inline\";\r\n        tmp.srcObject=mediaStream;\r\n        tmp.autoplay=true;\r\n        console.log(\"video elemnt\",tmp);\r\n\r\n   }\r\n\r\n   screenShareRevert(Id)\r\n   {\r\n    const tmp=document.getElementById('screen-share');\r\n    if(tmp)\r\n    {\r\n        tmp.pause();\r\n        tmp.srcObject=null;\r\n        tmp.style.display=\"none\";\r\n    }\r\n    var video = document.getElementById(Id);\r\n          if(video)\r\n          {\r\n           \r\n            video.style.display=\"inline\";\r\n            video.play();\r\n          }\r\n  \r\n   \r\n    \r\n   }\r\n\r\n   screenSharetoggle(toggle)\r\n   { \r\n\r\n       if(toggle)\r\n       {\r\n        if(!this.screenShareStatus)\r\n    return;\r\n   \r\n    \r\n            navigator.mediaDevices.getDisplayMedia({\r\n           video: {\r\n               cursor: \"always\"\r\n           },\r\n           audio: {\r\n               echoCancellation: true,\r\n               noiseSuppression: true\r\n\r\n           }\r\n            }).then((mediaStream)=>{\r\n        \r\n        \r\n        \r\n           mediaStream.getVideoTracks()[0].onended=()=>\r\n           {\r\n             \r\n           this.stopscreen();\r\n           }\r\n     \r\n           if(mediaStream)\r\n           {\r\n             this.socket.emit('screen-share',this.userId);\r\n             console.log('screen-share req sent');\r\n             this.currentStream=mediaStream;\r\n             this.screenShareStatus=!this.screenShareStatus;\r\n             this.updatevalue('screenShareStatus',this.screenShareStatus);\r\n             this.screenPresenter=!this.screenPresenter;\r\n             this.updatevalue('screenPresenter',this.screenPresenter);\r\n             this.screenShareView(this.userId,mediaStream);\r\n           \r\n          \r\n            for (const [key, value] of Object.entries(this.peers)) {\r\n            \r\n                value.getSenders().map((sender) => {\r\n                \r\n                    if(sender.track.kind == \"video\") {\r\n                        if(mediaStream.getVideoTracks().length > 0){\r\n                            sender.replaceTrack(mediaStream.getVideoTracks()[0]);\r\n                        }\r\n                    }\r\n                });\r\n                 }\r\n         \r\n             }\r\n          \r\n         \r\n\r\n            }).catch((err)=>{\r\n             console.log(\"unable to get screen stream\"+err)\r\n            })\r\n\r\n       }\r\n       else\r\n       {\r\n        this.stopscreen();\r\n       }\r\n    \r\n           \r\n   }\r\n   \r\n \r\n    stopscreen()\r\n    {if(!this.screenPresenter)\r\n        return;\r\n        \r\n       this.socket.emit('normal-view',this.userId);\r\n       this.screenPresenter=!this.screenPresenter;\r\n       this.screenShareStatus=!this.screenShareStatus;\r\n       this.updatevalue('screenShareStatus',this.screenShareStatus);\r\n       this.updatevalue('screenPresenter',this.screenPresenter);\r\n        this.screenShareRevert(this.userId);\r\n        var video = document.getElementById(this.userId);\r\n        if(video)\r\n        {\r\n            video.pause();\r\n            video.srcObject = this.localstream;\r\n            video.play();\r\n        }\r\n         \r\n          this.currentStream=this.localstream\r\n        for (const [key, value] of Object.entries(this.peers)) {\r\n            \r\n            value.getSenders().map((sender) => {\r\n            \r\n                if(sender.track.kind == \"video\") {\r\n                    if(this.localstream.getVideoTracks().length > 0){\r\n                        sender.replaceTrack(this.localstream.getVideoTracks()[0]);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    recordScreen(recordStatus){\r\n\r\n        if(recordStatus)\r\n        {\r\n            navigator.mediaDevices.getDisplayMedia({\r\n                video: {\r\n                    cursor: \"always\"\r\n                },\r\n                audio: {\r\n                    echoCancellation: true,\r\n                    noiseSuppression: true\r\n     \r\n                }\r\n            }).then((mediaStream)=>{\r\n               \r\n             \r\n                this.mediaRecorder=new MediaRecorder(mediaStream);\r\n               this.startrecording();\r\n               mediaStream.getVideoTracks()[0].onended=()=>\r\n               {\r\n                 \r\n               this.endrecording();\r\n               }\r\n            \r\n            }).catch((err)=>{\r\n                console.log(\"unable to get screen stream for recording\"+err)\r\n            })\r\n            \r\n        }\r\n        else \r\n        {\r\n           // this.mediaRecorder.stop();\r\n            this.endrecording();\r\n           \r\n        }\r\n        \r\n    }\r\n\r\n    startrecording()\r\n    {   \r\n        this.updatevalue('recordStatus',false);\r\n       \r\n        console.log(\"starting\",this.mediaRecorder);\r\n      \r\n       this.mediaRecorder.ondataavailable=(event)=>{\r\n        console.log(\"ondataavail\",event);\r\n        if (event.data.size > 0) {\r\n            this.recordedChunks.push(event.data);\r\n                }\r\n            }   \r\n\r\n        this.mediaRecorder.onstop=()=>{\r\n                const blob = new Blob(this.recordedChunks,{'type': 'video/mp4'});// {type: this.recordedChunks[0]});//'video/webm'});\r\n                console.log(this.recordedChunks.length);\r\n                const url = URL.createObjectURL(blob);\r\n                const a = document.createElement('a');\r\n                a.style.display = 'none';\r\n                a.href = url;\r\n                var today = new Date();\r\n                var date = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();\r\n                var time = today.getHours() + ':' + today.getMinutes() + ':' + today.getSeconds();\r\n                var dateTime = date+'-'+time;\r\n                a.download = 'Recording/'+dateTime+'.mp4';\r\n                document.body.appendChild(a);\r\n                a.click();\r\n               setTimeout(() => {\r\n                  document.body.removeChild(a);\r\n                  window.URL.revokeObjectURL(url);\r\n                }, 200);\r\n                this.recordedChunks=[];\r\n            }\r\n    this.mediaRecorder.start(1500);\r\n    }\r\n    \r\n    \r\n    endrecording()\r\n    {\r\n        if(this.mediaRecorder)\r\n        {\r\n            console.log(\"ending\",this.mediaRecorder);\r\n            this.updatevalue('recordStatus',true);\r\n            this.mediaRecorder.stop();\r\n            this.mediaRecorder=null;\r\n              \r\n        }\r\n       \r\n    }\r\n\r\n\r\n\r\n    broadcastmessage(newmessage,userName)\r\n    {\r\n        if(this.socket)\r\n        {\r\n            this.socket.emit('new-message',userName,newmessage);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    exitcall(username)\r\n    {\r\n     \r\n     if(this.screenPresenter)\r\n     {\r\n        this.socket.emit('normal-view',this.userId);\r\n     }\r\n     this.socket.emit('userleftchat',username);\r\n     this.socket.disconnect();\r\n     if(this.videoContainer[this.userId])\r\n     {\r\n         const Tracks = this.videoContainer[this.userId].getTracks();\r\n         Tracks.forEach(element => {element.stop();\r\n             \r\n         });\r\n     }\r\n    \r\n        delete(this.videoContainer);\r\n        delete(this.peer);\r\n        delete(this.peers);\r\n       \r\n    }\r\n \r\n   newuserChat(name)\r\n   {\r\n    setTimeout(()=>{ if(this.socket)\r\n        {\r\n         this.socket.emit('newuserName',name);\r\n        }},1500);\r\n      \r\n   }\r\n   \r\n\r\n}\r\n\r\n\r\nexport function createSocketConnectionInstance(settings={}) {\r\n    return  new SocketConnection(settings);\r\n}","import React, { memo, useState } from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport { Button, Dialog, DialogTitle, Input, InputLabel, Paper, TextField } from \"@material-ui/core\";\r\n// Style imports\r\nimport './popup.css';\r\n\r\nfunction UserPopup(props) {\r\n    const [popupToggle, setPopupToggle] = useState(true);\r\n    const [userDetails, setUserDetails] = useState({\r\n        name: ''\r\n    });\r\n\r\n    const handleChange = (event) => {\r\n        const { value } = event.target;\r\n        setUserDetails({ name: value });\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        if (event.type === 'keyup' ) {\r\n            return;\r\n        }\r\n        if (userDetails.name.length > 0) {\r\n            props.submitHandle(userDetails);\r\n            setPopupToggle(false);\r\n        }\r\n        /*&& React.KeyboardEvent.key !== 'Enter'*/\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Dialog disableBackdropClick={true} className=\"user-popup\" onClose={() => setPopupToggle(false)} open={popupToggle}>\r\n                <Paper className=\"user-popup-paper\" onKeyUp={handleSubmit} align=\"center\">\r\n                    <DialogTitle className=\"user-popup-title\" >Enter Your Name</DialogTitle>\r\n                    {/* <Input className=\"user-popup-input\" title=\"Name\" onChange={handleChange} placeholder=\"Name\"></Input> */}\r\n                    <div className=\"user-details-wrapper\">\r\n                        <TextField\r\n                            required\r\n                            title=\"Name\"\r\n                            id=\"outlined-required\"\r\n                            className=\"user-popup-input\"\r\n                            label=\"Name\"\r\n                            variant=\"outlined\"\r\n                            onChange={handleChange} \r\n                            placeholder=\"Name\"\r\n                        />\r\n                        <Button className=\"user-popup-button\" color=\"primary\" onClick={handleSubmit}>START</Button>\r\n                    </div>\r\n                </Paper>\r\n            </Dialog>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nUserPopup.propTypes = {\r\n    submitHandle: PropTypes.func\r\n}\r\n\r\nexport default memo(UserPopup);","import React, {useState, useEffect,useCallback} from 'react';\r\nimport {createSocketConnectionInstance} from './Connection';\r\nimport { AppBar, Toolbar } from '@material-ui/core';\r\nimport MicIcon from '@material-ui/icons/Mic';\r\nimport MicOffIcon from '@material-ui/icons/MicOff';\r\nimport VideocamIcon from '@material-ui/icons/Videocam';\r\nimport VideocamOffIcon from '@material-ui/icons/VideocamOff';\r\nimport CallEndRoundedIcon from '@material-ui/icons/CallEndRounded';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\r\n\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport './styles.css';\r\n\r\n\r\nimport { Widget,isWidgetOpened,addLinkSnippet, renderCustomComponent, deleteMessages, setBadgeCount} from 'react-chat-widget';\r\nimport 'react-chat-widget/lib/styles.css';\r\nimport ChatBubbleOutlinedIcon from '@material-ui/icons/ChatBubbleOutlined';\r\n\r\nimport UserPopup from './popup';\r\n\r\nlet socketInstance;\r\nlet msgCount;\r\nconst MeetWindow =(props)=>{\r\n  \r\n    const roomId = (props.location.pathname.substring(1));\r\n    \r\n    const [micStatus,setMic]=useState(true);\r\n    const [videoStatus,setCam] =useState(true);\r\n    const [recordStatus,setRecord]=useState(true);\r\n    const [screenShareStatus,setScreen]=useState(true);\r\n    const [screenPresenterStatus,setpresenter]=useState(false);\r\n    \r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n    const open = Boolean(anchorEl);\r\n    const [userName,setName]=useState('');\r\n\r\n    useEffect(() => {\r\n       \r\n      socketInstance=(createSocketConnectionInstance({\r\n        roomId:roomId,\r\n        micStatus:micStatus,\r\n        videoStatus:videoStatus,\r\n        recordStatus:recordStatus,\r\n        updatevalue: updatevalue,\r\n      }))\r\n      toast.configure();\r\n      deleteMessages();\r\n      addLinkSnippet({ title: 'Share this link with your friends to talk',\r\n      link: `http://localhost:3000${roomId}`,\r\n      target: ''})\r\n       // userName=prompt('Enter user name');\r\n      \r\n     \r\n        msgCount=0;\r\n    },[])\r\n\r\n    const updatevalue=(property,val)=>{\r\n      if(property==='recordStatus')\r\n      {\r\n        setRecord(val);\r\n      }\r\n      else if(property==='micStatus')\r\n      {\r\n        setMic(val);\r\n      }\r\n      else if(property==='videoStatus')\r\n      {\r\n        setCam(val);\r\n      }\r\n      else if(property==='screenPresenter')\r\n      {\r\n        setpresenter(val);\r\n        setCam(!val);\r\n          socketInstance.videotoggle(val);\r\n        \r\n      }\r\n      else if(property==='screenShareStatus')\r\n      {\r\n        setScreen(val);\r\n       \r\n      }\r\n      else if(property==='Incomingmessage')\r\n      {\r\n        updateNewMessage(val);\r\n        \r\n      }\r\n      else if(property==='newuserName')\r\n      {\r\n        newuserjoined(val);\r\n      }\r\n\r\n    }\r\n\r\n    const exitcall=()=>{\r\n      socketInstance.exitcall(userName);\r\n      props.history.push('/');\r\n    }\r\n\r\n\r\n\r\n    const mictoggle=()=>{\r\n      socketInstance.mictoggle(micStatus)\r\n\r\n\r\n    }\r\n\r\n\r\n    const videotoggle=()=>{\r\n      if(screenPresenterStatus)\r\n      return;\r\n\r\n      socketInstance.videotoggle(videoStatus);\r\n\r\n    }\r\n   \r\n\r\n    const screenShare=()=>{\r\n      socketInstance.screenSharetoggle(screenShareStatus);\r\n     \r\n      \r\n    }\r\n\r\n    const recordScreen=()=>{\r\n      socketInstance.recordScreen(recordStatus);\r\n\r\n    }\r\n\r\n    const copyToClipboard=() => {\r\n      var textField = document.createElement('textarea')\r\n      textField.innerText = roomId;\r\n      document.body.appendChild(textField)\r\n      textField.select()\r\n      document.execCommand('copy')\r\n      textField.remove()\r\n    }\r\n\r\n    const copyLink=()=>{\r\n    \r\n     copyToClipboard();\r\n     \r\n      toast.info(`Room code copied to clipboard !`,{position: toast.POSITION.TOP_CENTER});\r\n    }\r\n    \r\n    \r\n\r\n    const handleClick = (event) => {\r\n      setAnchorEl(event.currentTarget);\r\n    };\r\n  \r\n    const handleClose = () => {\r\n      setAnchorEl(null);\r\n    };\r\n  \r\n    const handleNewUserMessage=(Message)=>{\r\n    \r\n      socketInstance.broadcastmessage(Message,userName);\r\n      \r\n    }\r\n    const updateNewMessage=(updateNewMessage)=>{   \r\n     renderCustomComponent(Reply,updateNewMessage); \r\n    msgCount++;\r\n     console.log(`msg count: ${msgCount}`);\r\n     setBadgeCount(msgCount);\r\n\r\n    \r\n    }\r\n\r\n    const newuserjoined=(userName)=>{\r\n      renderCustomComponent(newUser,userName);\r\n   \r\n    }\r\n  \r\n    const newUser=(props)=>{\r\n      return(<React.Fragment> <div class=\"chat-messages\">\r\n     \r\n    \r\n     <div class=\"new-user\">{props.userName} {props.messageBody}</div>\r\n   </div>\r\n </React.Fragment>\r\n\r\n     )\r\n\r\n    }\r\n   const Reply=(props)=>{\r\n     return(<React.Fragment> <div class=\"chat-messages\">\r\n     <div class=\"message\">{props.messageBody}</div>\r\n    \r\n     <div class=\"from\">{props.userName} {new Date().toLocaleTimeString()}</div>\r\n   </div>\r\n </React.Fragment>\r\n\r\n     )\r\n  \r\n   }\r\n\r\n\r\n \r\n\r\n\r\n   const handleuserDetails=(val)=>{\r\n    setName(val.name);\r\n    console.log('username',val.name);\r\n        socketInstance.newuserChat(val.name);\r\n\r\n   }\r\n\r\n    return(<React.Fragment>\r\n    <div onClick={()=>{if(isWidgetOpened()){ msgCount=0;}}}>\r\n    <Widget handleNewUserMessage={handleNewUserMessage}  \r\n            title=\"Chat here !\"\r\n          subtitle=\"\" \r\n            autofocus={false}\r\n            showTimeStamp={false}\r\n            setBadgeCount={msgCount}\r\n          \r\n          />\r\n    </div>\r\n    <UserPopup submitHandle={handleuserDetails}></UserPopup>\r\n    \r\n    <div id=\"video-grid\"> <video id=\"screen-share\" display=\"none\"/> </div>\r\n     <AppBar className=\"footbar-wrapper\" position=\"bottom-fixed\" color=\"primary\" >\r\n                <Toolbar className={`footbar-tool`}>\r\n                <div  onClick={mictoggle} title={micStatus ? 'Disable Mic' : 'Enable Mic'}>\r\n                        {micStatus ?<MicIcon/>:<MicOffIcon/>}\r\n                </div>\r\n                <div  onClick={exitcall} >\r\n                        <CallEndRoundedIcon/>\r\n                </div>\r\n              \r\n               <div  onClick={videotoggle} title={micStatus ? 'Disable Cam' : 'Enable Cam'}>\r\n                        {videoStatus ?<VideocamIcon/>:<VideocamOffIcon/>}\r\n                </div>  \r\n                <div onClick={copyLink} title='Add user'>\r\n                 {<PersonAddIcon/>}\r\n                </div>\r\n                <IconButton\r\n                    aria-label=\"more\"\r\n                    aria-controls=\"long-menu\"\r\n                    aria-haspopup=\"true\"\r\n                    onClick={handleClick}>\r\n                      <MoreVertIcon />\r\n                </IconButton>\r\n                <Menu\r\n                  id=\"more\"\r\n                  anchorEl={anchorEl}\r\n                  keepMounted\r\n                  open={open}\r\n                  onClose={handleClose}\r\n                  TransitionComponent={Fade}>\r\n        <MenuItem onClick={screenShare}>{(!screenPresenterStatus && !screenShareStatus)?\"Disabled\":(screenShareStatus)?\"Share Screen\":\"End ScreenShare\"}</MenuItem>\r\n        <MenuItem onClick={recordScreen}>{(recordStatus)?\"Start Recording\":\"Stop Recording\"}</MenuItem>\r\n       \r\n      </Menu>\r\n\r\n     \r\n                </Toolbar>\r\n    \r\n               \r\n            </AppBar>\r\n       \r\n        \r\n         \r\n          \r\n          \r\n            </React.Fragment>)\r\n};\r\n\r\nexport default MeetWindow;\r\n\r\n/*\r\n launcher={handleToggle => getCustomLauncher(handleToggle)}\r\n \r\n\r\n\r\n\r\n\r\n handleToggle={handleToggle}\r\n\r\n\r\n <MenuItem onClick={copyLink}><PersonAddIcon/></MenuItem>\r\n <Box display=\"flex\" flexWrap=\"wrap\" justify-content=\"space-evenly\"  id=\"video-grid\"></Box>\r\n \r\n {`footbar-tool ${props.className}`}\r\n \r\n  <Button onClick={mictoggle}>mic</Button>\r\n  <Button onClick={videotoggle}>cam</Button>\r\n\r\n  <div  onClick={videotoggle} title={micStatus ? 'Disable Cam' : 'Enable Cam'}>\r\n\r\n   <Button onClick={exitcall}>exit</Button>\r\n\r\n    <Button onClick={screenShare}>screenShare</Button><Button onClick={recordScreen}>Record</Button> <Button onClick={copyLink}>add user</Button>\r\n\r\n\r\n    const useStyles = makeStyles({\r\n      root: {\r\n        background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\r\n        border: 0,\r\n        borderRadius: 3,\r\n        boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\r\n        color: 'white',\r\n        height: 48,\r\n        padding: '0 30px',\r\n      },\r\n      \r\n      \r\n\r\n      \r\n    });\r\n */","import React from 'react';\r\n\r\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\r\n\r\nimport LandingPage from './components/LandingPage';\r\nimport MeetWindow from './components/MeetWindow';\r\n\r\n\r\nconst App=()=>(\r\n    <Router>\r\n     \r\n     <Route path=\"/\" exact component={LandingPage}/>\r\n    <Route path=\"/:Room\" component={MeetWindow}/>\r\n    \r\n    </Router>\r\n);\r\nexport default App;\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.getElementById('root')\r\n  );\r\n\r\n\r\n\r\n\r\n"],"sourceRoot":""}