{"ast":null,"code":"import io from 'socket.io-client';\nimport Peer from 'peerjs';\n\nclass SocketConnection {\n  constructor(props) {\n    this.ENDPOINT = 'localhost:5000';\n    this.peer = new Peer();\n    this.socket = io(this.ENDPOINT);\n    this.peers = {};\n    this.videoContainer = {};\n    this.roomId = props.roomId;\n    this.peer = new Peer();\n    this.socket = io(this.ENDPOINT);\n    console.log('inside the connection da ngotha :' + props.roomId);\n    this.PeerEvent();\n  }\n\n  PeerEvent() {\n    this.peer.on('open', id => {\n      this.userId = id;\n      console.log('generated userId: ' + id);\n      this.setlocalstream();\n      console.log(\"emitting joining room request\");\n      setTimeout(() => {\n        this.socket.emit('joining-room', this.roomId, id);\n      }, 1500);\n    });\n    this.peer.on('error', err => {\n      console.log('reconnecting to peer', err);\n      this.peer.reconnect();\n    });\n  }\n\n  newUserConnection(stream) {\n    this.socket.on('user-joined', Id => {\n      console.log(\"joined use:\" + Id);\n      this.connectToUser(stream, Id);\n    });\n    this.socket.on('user-left', Id => {\n      this.removeuser(Id);\n    });\n  }\n\n  connectToUser(stream, Id) {\n    const call = this.peer.call(Id, stream, {\n      metadata: {\n        userId: this.userId\n      }\n    });\n    this.peer.on('error', err => {\n      console.log(\"ERROR\" + err);\n    });\n    console.log('made call to ' + Id + 'stream');\n    call.on('stream', externalstream => {\n      console.log('connteced user returned stream');\n      this.addstream(externalstream, Id);\n    });\n    /*  call.on('close',()=>{\r\n           this.removeuser(Id);\r\n        })*/\n\n    this.peers[Id] = call.peerConnection;\n  }\n\n  setPeerListenres(stream) {\n    console.log('peerlisteners set');\n    this.peer.on('call', Call => {\n      Call.answer(stream);\n      Call.on('stream', externalstream => {\n        console.log('incoming stream');\n        this.peers[Call.metadata.userId] = Call.peerConnection;\n        this.addstream(externalstream, Call.metadata.userId);\n      });\n      /* Call.on('close',()=>{\r\n           this.removeuser(Call.metadata.userId);\r\n       })\r\n      */\n    });\n  }\n\n  setlocalstream() {\n    this.getvideoaudio(true, true).then(stream => {\n      this.localstream = stream;\n      this.addstream(stream, this.userId);\n      this.setPeerListenres(stream);\n      this.newUserConnection(stream);\n    }).catch(function (err) {\n      console.log(err.name + \": \" + err.message);\n    });\n  }\n\n  getvideoaudio(videostatus, micstatus) {\n    const myNavigator = navigator.mediaDevices.getUserMedia || navigator.mediaDevices.webkitGetUserMedia || navigator.mediaDevices.mozGetUserMedia || navigator.mediaDevices.msGetUserMedia;\n    return myNavigator({\n      video: videostatus,\n      audio: micstatus\n    });\n  }\n\n  addstream(stream, Id) {\n    if (!this.videoContainer[Id]) {\n      const videogrid = document.getElementById('video-grid');\n      this.videoContainer[Id] = stream;\n      const localcontainer = document.createElement('div');\n      const video = document.createElement('video');\n      video.srcObject = stream;\n      video.id = Id;\n      video.autoplay = true;\n      if (this.userId === Id) video.muted = true;\n      localcontainer.appendChild(video);\n      videogrid.append(localcontainer);\n      console.log(\"done creating video :\" + Id);\n    }\n  }\n\n  removeuser(Id) {\n    if (this.peers[Id]) this.peers[Id].close();\n    delete this.videoContainer[Id];\n    const video = document.getElementById(Id);\n    if (video) video.remove();\n    delete this.peers[Id];\n  }\n\n  videotoggle(videostatus) {\n    this.localstream.getVideoTracks()[0].enabled = !videostatus;\n  }\n\n  mictoggle(micStatus) {\n    this.localstream.getAudioTracks()[0].enabled = !micStatus;\n  }\n\n  exitcall() {\n    this.socket.disconnect();\n\n    if (this.videoContainer[this.userId]) {\n      const Tracks = this.videoContainer[this.userId].getTracks();\n      Tracks.forEach(element => {\n        element.stop();\n      });\n    }\n\n    delete this.videoContainer;\n    delete this.peer;\n    delete this.peers;\n  } //Experimental\n\n\n  stopscreenshare() {\n    console.log('stop ne');\n  }\n\n  screenSharetoggle() {\n    navigator.mediaDevices.getDisplayMedia({\n      video: {\n        cursor: \"always\"\n      },\n      audio: {\n        echoCancellation: true,\n        noiseSuppression: true\n      }\n    }).then(mediaStream => {\n      /*  mediaStream.onended=()=>{\r\n            stopscreenshare();\r\n        }\r\n        let localvideo=Document.getElementById(this.userID);\r\n        localvideo.srcObject=mediaStream;*/\n      this.localstream.getVideoTracks()[0] = mediaStream;\n\n      for (const [key, value] of Object.entries(this.peers)) {\n        value.getSenders().map(sender => {\n          if (sender.track.kind == \"video\") {\n            if (mediaStream.getVideoTracks().length > 0) {\n              sender.replaceTrack(mediaStream.getVideoTracks()[0]);\n            }\n          }\n        });\n      }\n    }).catch(err => {\n      console.log(\"unable to get screen stream\" + err);\n    });\n  }\n\n  changeMediaView(userID, status) {\n    const userVideoDOM = document.getElementById(userID);\n\n    if (status) {\n      const clientPosition = userVideoDOM.getBoundingClientRect();\n      const createdCanvas = document.createElement(\"SPAN\");\n      createdCanvas.className = userID;\n      createdCanvas.style.position = 'absolute';\n      createdCanvas.style.left = `${clientPosition.left}px`;\n      createdCanvas.style.top = `${clientPosition.top}px`;\n      createdCanvas.style.width = `${userVideoDOM.videoWidth}px`;\n      createdCanvas.style.height = `${clientPosition.height}px`;\n      createdCanvas.style.width = '100%';\n      createdCanvas.style.height = '100%';\n      createdCanvas.style.backgroundColor = 'green';\n      userVideoDOM.parentElement.appendChild(createdCanvas);\n    } else {\n      const canvasElement = document.getElementsByClassName(userID);\n      if (canvasElement[0]) canvasElement[0].remove();\n    }\n  }\n\n}\n\nexport function createSocketConnectionInstance(settings = {}) {\n  return new SocketConnection(settings);\n}","map":{"version":3,"sources":["E:/Microsoft ENgae/reactFrontend/client-app/src/components/Connection.js"],"names":["io","Peer","SocketConnection","constructor","props","ENDPOINT","peer","socket","peers","videoContainer","roomId","console","log","PeerEvent","on","id","userId","setlocalstream","setTimeout","emit","err","reconnect","newUserConnection","stream","Id","connectToUser","removeuser","call","metadata","externalstream","addstream","peerConnection","setPeerListenres","Call","answer","getvideoaudio","then","localstream","catch","name","message","videostatus","micstatus","myNavigator","navigator","mediaDevices","getUserMedia","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","video","audio","videogrid","document","getElementById","localcontainer","createElement","srcObject","autoplay","muted","appendChild","append","close","remove","videotoggle","getVideoTracks","enabled","mictoggle","micStatus","getAudioTracks","exitcall","disconnect","Tracks","getTracks","forEach","element","stop","stopscreenshare","screenSharetoggle","getDisplayMedia","cursor","echoCancellation","noiseSuppression","mediaStream","key","value","Object","entries","getSenders","map","sender","track","kind","length","replaceTrack","changeMediaView","userID","status","userVideoDOM","clientPosition","getBoundingClientRect","createdCanvas","className","style","position","left","top","width","videoWidth","height","backgroundColor","parentElement","canvasElement","getElementsByClassName","createSocketConnectionInstance","settings"],"mappings":"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","sourcesContent":["import io from 'socket.io-client';\r\nimport Peer from 'peerjs';\r\n\r\n\r\nclass SocketConnection {\r\n    ENDPOINT='localhost:5000';\r\n    peer= new Peer();\r\n    socket=io(this.ENDPOINT);\r\n    peers={};\r\n    videoContainer={};\r\n    constructor(props)\r\n    {\r\n        this.roomId=props.roomId;\r\n        this.peer=new Peer();\r\n        this.socket=io(this.ENDPOINT);\r\n        console.log('inside the connection da ngotha :'+props.roomId);\r\n        \r\n        this.PeerEvent();\r\n        \r\n        \r\n    }\r\n\r\n    PeerEvent()\r\n    {\r\n       \r\n        this.peer.on('open',(id) =>{\r\n            this.userId=id;\r\n            console.log('generated userId: '+id);\r\n            this.setlocalstream();\r\n            console.log(\"emitting joining room request\")\r\n            setTimeout(()=>{this.socket.emit('joining-room', this.roomId, id)},1500);\r\n           \r\n            \r\n            \r\n       });\r\n       this.peer.on('error',(err)=>{\r\n           console.log('reconnecting to peer',err);\r\n           this.peer.reconnect();\r\n       })\r\n      \r\n        \r\n    }\r\n\r\n    newUserConnection(stream)\r\n    {\r\n        this.socket.on('user-joined',(Id)=>{\r\n           \r\n            console.log(\"joined use:\"+Id);\r\n          \r\n                this.connectToUser(stream,Id);\r\n            \r\n            \r\n            \r\n           \r\n            \r\n          \r\n        });\r\n        this.socket.on('user-left',(Id)=>{\r\n            this.removeuser(Id);\r\n        })\r\n\r\n    }\r\n    connectToUser(stream,Id)\r\n        {\r\n       \r\n            const call=this.peer.call(Id,stream,{ metadata: { userId: this.userId } });\r\n            this.peer.on('error',(err)=>{\r\n                console.log(\"ERROR\"+err);\r\n            })\r\n            console.log('made call to '+ Id+ 'stream');\r\n            call.on('stream',(externalstream)=>{\r\n                console.log('connteced user returned stream');\r\n                this.addstream(externalstream,Id);\r\n            })\r\n        /*  call.on('close',()=>{\r\n               this.removeuser(Id);\r\n            })*/\r\n            this.peers[Id]=call.peerConnection;\r\n          \r\n        }\r\n   \r\n    \r\n    setPeerListenres(stream)\r\n    {\r\n        console.log('peerlisteners set');\r\n        this.peer.on('call', (Call) =>{\r\n           \r\n            Call.answer(stream);\r\n            Call.on('stream',(externalstream)=>{\r\n             console.log('incoming stream');\r\n             this.peers[Call.metadata.userId]=Call.peerConnection;\r\n                this.addstream(externalstream,Call.metadata.userId);\r\n            })\r\n           /* Call.on('close',()=>{\r\n                this.removeuser(Call.metadata.userId);\r\n            })\r\n           */\r\n        })\r\n    }\r\n    setlocalstream()\r\n    { \r\n        \r\n       this.getvideoaudio(true,true).then((stream)=> {\r\n         this.localstream=stream;\r\n        this.addstream(stream,this.userId);\r\n        this.setPeerListenres(stream);\r\n        this.newUserConnection(stream);\r\n      })\r\n      .catch(function(err) { console.log(err.name + \": \" + err.message); });\r\n     \r\n    }\r\n    getvideoaudio(videostatus,micstatus)\r\n    {\r\n        const myNavigator = navigator.mediaDevices.getUserMedia || navigator.mediaDevices.webkitGetUserMedia || navigator.mediaDevices.mozGetUserMedia || navigator.mediaDevices.msGetUserMedia;\r\n        return myNavigator({video:videostatus,audio :micstatus});\r\n    }\r\n    \r\n    \r\n    addstream(stream,Id)\r\n   {\r\n       if(!this.videoContainer[Id])\r\n       {\r\n        const videogrid=document.getElementById('video-grid');\r\n      \r\n        this.videoContainer[Id]=stream;\r\n        const localcontainer = document.createElement('div');\r\n        const video = document.createElement('video');\r\n        video.srcObject =stream;\r\n        video.id=Id;\r\n        video.autoplay = true;\r\n        if (this.userId === Id) video.muted = true;\r\n        localcontainer.appendChild(video)\r\n        videogrid.append(localcontainer);\r\n        console.log(\"done creating video :\"+Id);\r\n       \r\n        \r\n       }\r\n      \r\n   }\r\n\r\n   removeuser(Id)\r\n   {\r\n    if(this.peers[Id])this.peers[Id].close();\r\n    delete this.videoContainer[Id];\r\n    const video = document.getElementById(Id);\r\n    if (video) video.remove();\r\n    delete this.peers[Id];\r\n    \r\n\r\n   }\r\n   \r\n\r\n\r\n   videotoggle(videostatus)\r\n   {\r\n    this.localstream.getVideoTracks()[0].enabled =!videostatus; \r\n   }\r\n\r\n\r\n   mictoggle(micStatus)\r\n   {\r\n    this.localstream.getAudioTracks()[0].enabled =!micStatus;\r\n   }\r\n\r\n\r\n   exitcall()\r\n   {\r\n    this.socket.disconnect();\r\n    if(this.videoContainer[this.userId])\r\n    {\r\n        const Tracks = this.videoContainer[this.userId].getTracks();\r\n        Tracks.forEach(element => {element.stop();\r\n            \r\n        });\r\n    }\r\n   \r\n       delete(this.videoContainer);\r\n       delete(this.peer);\r\n       delete(this.peers);\r\n      \r\n   }\r\n//Experimental\r\nstopscreenshare()\r\n{\r\n    console.log('stop ne');\r\n}\r\n   screenSharetoggle()\r\n   {\r\n    \r\n   \r\n    \r\n       navigator.mediaDevices.getDisplayMedia({\r\n           video: {\r\n               cursor: \"always\"\r\n           },\r\n           audio: {\r\n               echoCancellation: true,\r\n               noiseSuppression: true\r\n\r\n           }\r\n       }).then((mediaStream)=>{\r\n         /*  mediaStream.onended=()=>{\r\n               stopscreenshare();\r\n           }\r\n           let localvideo=Document.getElementById(this.userID);\r\n           localvideo.srcObject=mediaStream;*/\r\n           this.localstream.getVideoTracks()[0]=mediaStream;\r\n        for (const [key, value] of Object.entries(this.peers)) {\r\n           \r\n            value.getSenders().map((sender) => {\r\n               \r\n                if(sender.track.kind == \"video\") {\r\n                    if(mediaStream.getVideoTracks().length > 0){\r\n                        sender.replaceTrack(mediaStream.getVideoTracks()[0]);\r\n                    }\r\n                }\r\n            });\r\n          }\r\n         \r\n        }).catch((err)=>{\r\n            console.log(\"unable to get screen stream\"+err)\r\n        })\r\n\r\n           \r\n   }\r\n\r\n \r\n\r\n   changeMediaView(userID, status){\r\n    const userVideoDOM = document.getElementById(userID);\r\n    if (status) {\r\n        const clientPosition = userVideoDOM.getBoundingClientRect();\r\n        const createdCanvas = document.createElement(\"SPAN\");\r\n        createdCanvas.className = userID;\r\n        createdCanvas.style.position = 'absolute';\r\n        createdCanvas.style.left = `${clientPosition.left}px`;\r\n        createdCanvas.style.top = `${clientPosition.top}px`;\r\n        createdCanvas.style.width = `${userVideoDOM.videoWidth}px`;\r\n        createdCanvas.style.height = `${clientPosition.height}px`;\r\n        createdCanvas.style.width = '100%';\r\n        createdCanvas.style.height = '100%';\r\n        createdCanvas.style.backgroundColor = 'green';\r\n        userVideoDOM.parentElement.appendChild(createdCanvas);\r\n    } else {\r\n        const canvasElement = document.getElementsByClassName(userID);\r\n        if (canvasElement[0]) canvasElement[0].remove();\r\n    }\r\n}\r\n   \r\n\r\n}\r\n\r\n\r\nexport function createSocketConnectionInstance(settings={}) {\r\n    return  new SocketConnection(settings);\r\n}"]},"metadata":{},"sourceType":"module"}