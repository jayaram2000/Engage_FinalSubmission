{"ast":null,"code":"import io from 'socket.io-client';\nimport Peer from 'peerjs';\n\nclass SocketConnection {\n  constructor(props) {\n    this.ENDPOINT = 'localhost:5000';\n    this.peer = new Peer();\n    this.socket = io(this.ENDPOINT);\n    this.peers = new Object();\n    this.videoContainer = new Object();\n    this.roomId = props.roomId;\n    this.peer = new Peer();\n    this.socket = io(this.ENDPOINT);\n    console.log('inside the connection da ngotha :' + props.roomId);\n    this.socketEvent();\n    this.PeerEvent();\n  }\n\n  socketEvent() {\n    /* \r\n        */\n  }\n\n  PeerEvent() {\n    this.peer.on('open', id => {\n      this.userId = id;\n      console.log('generated userId: ' + id);\n      this.setlocalstream();\n      console.log(\"emitting joining room request\");\n      setTimeout(() => {\n        this.socket.emit('joining-room', this.roomId, id);\n      }, 2000); // this.socket.emit('joining-room', this.roomId, id);\n    });\n  }\n\n  newUserConnection(stream) {\n    this.socket.on('user-joined', Id => {\n      console.log(\"joined use:\" + Id);\n      this.connectToUser(stream, Id);\n    });\n  }\n\n  connectToUser(stream, Id) {\n    const call = this.peer.call(Id, stream, {\n      metadata: {\n        userId: this.userId\n      }\n    });\n    this.peer.on('error', err => {\n      console.log(\"ERROR\" + err);\n    });\n    console.log('made call to ' + Id + 'stream' + call);\n    call.on('stream', externalstream => {\n      console.log('connteced user returned stream');\n      this.addstream(externalstream, Id);\n    });\n    call.on('close', () => {});\n    this.peers[Id] = call;\n  }\n\n  setPeerListenres(stream) {\n    console.log('peerlisteners set');\n    this.peer.on('call', Call => {\n      Call.answer(stream);\n      Call.on('stream', externalstream => {\n        console.log('incoming stream');\n        this.addstream(externalstream, Call.metadata.userId);\n      });\n      Call.on('close', () => {});\n    });\n  }\n\n  setlocalstream() {\n    this.getvideoaudio().then(stream => {\n      this.localstream = stream;\n      this.addstream(stream, this.userId);\n      this.setPeerListenres(stream);\n      this.newUserConnection(stream);\n    }).catch(function (err) {\n      console.log(err.name + \": \" + err.message);\n    });\n  }\n\n  getvideoaudio() {\n    const myNavigator = navigator.mediaDevices.getUserMedia || navigator.mediaDevices.webkitGetUserMedia || navigator.mediaDevices.mozGetUserMedia || navigator.mediaDevices.msGetUserMedia;\n    return myNavigator({\n      video: true,\n      audio: true\n    });\n  }\n\n  addstream(stream, Id) {\n    if (!this.videoContainer[Id]) {\n      const videogrid = document.getElementById('video-grid');\n      this.videoContainer[Id] = document.createElement('div');\n      const video = document.createElement('video');\n      video.srcObject = stream; // this.videoContainer[createObj.id].stream;\n\n      video.id = Id;\n      video.autoplay = true;\n      if (this.userId === Id) video.muted = true;\n      this.videoContainer[Id].appendChild(video);\n      videogrid.append(this.videoContainer[Id]);\n      console.log(\"done creating video :\" + Id);\n    }\n  }\n\n  removeuser(Id) {\n    this.peers[Id].close();\n    delete this.videoContainer[Id];\n    delete this.peers[Id];\n  }\n\n}\n\nexport function createSocketConnectionInstance(settings = {}) {\n  return new SocketConnection(settings);\n}","map":{"version":3,"sources":["E:/Microsoft ENgae/reactFrontend/client-app/src/components/Connection.js"],"names":["io","Peer","SocketConnection","constructor","props","ENDPOINT","peer","socket","peers","Object","videoContainer","roomId","console","log","socketEvent","PeerEvent","on","id","userId","setlocalstream","setTimeout","emit","newUserConnection","stream","Id","connectToUser","call","metadata","err","externalstream","addstream","setPeerListenres","Call","answer","getvideoaudio","then","localstream","catch","name","message","myNavigator","navigator","mediaDevices","getUserMedia","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","video","audio","videogrid","document","getElementById","createElement","srcObject","autoplay","muted","appendChild","append","removeuser","close","createSocketConnectionInstance","settings"],"mappings":"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","sourcesContent":["import io from 'socket.io-client';\r\nimport Peer from 'peerjs';\r\n\r\n\r\nclass SocketConnection {\r\n    ENDPOINT='localhost:5000';\r\n    peer= new Peer();\r\n    socket=io(this.ENDPOINT);\r\n    peers=new Object();\r\n    videoContainer= new Object();\r\n    constructor(props)\r\n    {\r\n        this.roomId=props.roomId;\r\n        this.peer=new Peer();\r\n        this.socket=io(this.ENDPOINT);\r\n        console.log('inside the connection da ngotha :'+props.roomId);\r\n        this.socketEvent();\r\n        this.PeerEvent();\r\n        \r\n        \r\n    }\r\n\r\n   \r\n    socketEvent()\r\n    {\r\n        \r\n      /* \r\n\r\n        */\r\n       \r\n    }\r\n    PeerEvent()\r\n    {\r\n       \r\n        this.peer.on('open',(id) =>{\r\n            this.userId=id;\r\n            console.log('generated userId: '+id);\r\n            this.setlocalstream();\r\n            console.log(\"emitting joining room request\")\r\n            setTimeout(()=>{this.socket.emit('joining-room', this.roomId, id)},2000);\r\n           // this.socket.emit('joining-room', this.roomId, id);\r\n            \r\n            \r\n       });\r\n       \r\n      \r\n        \r\n    }\r\n\r\n    newUserConnection(stream)\r\n    {\r\n        this.socket.on('user-joined',(Id)=>{\r\n           \r\n            console.log(\"joined use:\"+Id);\r\n          \r\n                this.connectToUser(stream,Id);\r\n            \r\n            \r\n            \r\n           \r\n            \r\n          \r\n        });\r\n\r\n    }\r\n    connectToUser(stream,Id)\r\n        {\r\n       \r\n            const call=this.peer.call(Id,stream,{ metadata: { userId: this.userId } });\r\n            this.peer.on('error',(err)=>{\r\n                console.log(\"ERROR\"+err);\r\n            })\r\n            console.log('made call to '+ Id+ 'stream'+call);\r\n            call.on('stream',(externalstream)=>{\r\n                console.log('connteced user returned stream');\r\n                this.addstream(externalstream,Id);\r\n            })\r\n          call.on('close',()=>{\r\n               \r\n            })\r\n            this.peers[Id]=call;\r\n        }\r\n   \r\n    \r\n    setPeerListenres(stream)\r\n    {\r\n        console.log('peerlisteners set');\r\n        this.peer.on('call', (Call) =>{\r\n            \r\n            Call.answer(stream);\r\n            Call.on('stream',(externalstream)=>{\r\n             console.log('incoming stream');\r\n                \r\n                this.addstream(externalstream,Call.metadata.userId);\r\n            })\r\n            Call.on('close',()=>{\r\n\r\n            })\r\n           \r\n        })\r\n    }\r\n    setlocalstream()\r\n    { \r\n        \r\n       this.getvideoaudio().then((stream)=> {\r\n         this.localstream=stream;\r\n        this.addstream(stream,this.userId);\r\n        this.setPeerListenres(stream);\r\n        this.newUserConnection(stream);\r\n      })\r\n      .catch(function(err) { console.log(err.name + \": \" + err.message); });\r\n     \r\n    }\r\n    getvideoaudio()\r\n    {\r\n        const myNavigator = navigator.mediaDevices.getUserMedia || navigator.mediaDevices.webkitGetUserMedia || navigator.mediaDevices.mozGetUserMedia || navigator.mediaDevices.msGetUserMedia;\r\n        return myNavigator({video:true,audio :true});\r\n    }\r\n    \r\n    addstream(stream,Id)\r\n   {\r\n       if(!this.videoContainer[Id])\r\n       {\r\n        const videogrid=document.getElementById('video-grid');\r\n      \r\n        this.videoContainer[Id] = document.createElement('div');\r\n        const video = document.createElement('video');\r\n        video.srcObject =stream;// this.videoContainer[createObj.id].stream;\r\n        video.id=Id;\r\n        video.autoplay = true;\r\n        if (this.userId === Id) video.muted = true;\r\n        this.videoContainer[Id].appendChild(video)\r\n        videogrid.append(this.videoContainer[Id]);\r\n        console.log(\"done creating video :\"+Id);\r\n       \r\n        \r\n       }\r\n      \r\n   }\r\n\r\n   removeuser(Id)\r\n   {\r\n    this.peers[Id].close();\r\n    delete this.videoContainer[Id];\r\n    delete this.peers[Id];\r\n    \r\n\r\n   }\r\n   \r\n\r\n}\r\n\r\n\r\nexport function createSocketConnectionInstance(settings={}) {\r\n    return  new SocketConnection(settings);\r\n}"]},"metadata":{},"sourceType":"module"}