{"ast":null,"code":"import io from 'socket.io-client';\nimport Peer from 'peerjs';\n\nclass SocketConnection {\n  constructor(props) {\n    this.ENDPOINT = 'localhost:5000';\n    this.peer = new Peer();\n    this.socket = null;\n    this.roomId = props.roomId;\n    this.peer = new Peer();\n    this.socket = io(this.ENDPOINT);\n    console.log('inside the connection da ngotha :' + props.roomId);\n    this.socketEvent();\n    this.PeerEvent();\n  }\n\n  socketEvent() {\n    this.socket = io(this.ENDPOINT);\n    this.socket.on('user-joined', Id => {\n      this.connectToUser(this.localstream, Id);\n    });\n  }\n\n  connectToUser(stream, Id) {\n    this.peer.call(Id, stream);\n  }\n\n  PeerEvent() {\n    this.peer.on('open', id => {\n      this.socket.emit('joining-room', this.roomId, id);\n      console.log('generated userId: ' + id);\n      this.userId = id;\n    });\n    this.setlocalstream();\n  }\n\n  setPeerListenres(stream) {\n    this.peer.on('call', call => {\n      call.answer(stream);\n      call.on('stream', externalstream => {\n        this.addstream(externalstream, call.metadata.id);\n      });\n    });\n  }\n\n  setlocalstream() {\n    console.log(this);\n    this.getvideoaudio().then(stream => {\n      this.localstream = stream;\n      this.addstream(stream, this.userId);\n      this.setPeerListenres(stream);\n    }).catch(function (err) {\n      console.log(err.name + \": \" + err.message);\n    });\n  }\n\n  getvideoaudio() {\n    return navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    });\n  }\n\n  addstream(stream, Id) {\n    const videogrid = document.getElementById('video-grid');\n    const videoContainer = document.createElement('div');\n    const video = document.createElement('video');\n    video.srcObject = stream; // this.videoContainer[createObj.id].stream;\n\n    video.autoplay = true;\n    if (this.userId === Id) video.muted = true;\n    videoContainer.appendChild(video);\n    videogrid.append(videoContainer);\n    console.log(\"done creating video\");\n  }\n\n}\n\nexport function createSocketConnectionInstance(settings = {}) {\n  return new SocketConnection(settings);\n}","map":{"version":3,"sources":["E:/Microsoft ENgae/reactFrontend/client-app/src/components/Connection.js"],"names":["io","Peer","SocketConnection","constructor","props","ENDPOINT","peer","socket","roomId","console","log","socketEvent","PeerEvent","on","Id","connectToUser","localstream","stream","call","id","emit","userId","setlocalstream","setPeerListenres","answer","externalstream","addstream","metadata","getvideoaudio","then","catch","err","name","message","navigator","mediaDevices","getUserMedia","video","audio","videogrid","document","getElementById","videoContainer","createElement","srcObject","autoplay","muted","appendChild","append","createSocketConnectionInstance","settings"],"mappings":"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","sourcesContent":["import io from 'socket.io-client';\r\nimport Peer from 'peerjs';\r\n\r\n\r\nclass SocketConnection {\r\n    ENDPOINT='localhost:5000';\r\n    peer= new Peer();\r\n    socket=null\r\n  \r\n    constructor(props)\r\n    {\r\n        this.roomId=props.roomId;\r\n        this.peer=new Peer();\r\n        this.socket=io(this.ENDPOINT);\r\n        console.log('inside the connection da ngotha :'+props.roomId);\r\n        this.socketEvent();\r\n        this.PeerEvent();\r\n        \r\n    }\r\n\r\n   \r\n    socketEvent()\r\n    {\r\n        this.socket=io(this.ENDPOINT);\r\n        this.socket.on('user-joined',(Id)=>{\r\n        \r\n            this.connectToUser(this.localstream,Id);\r\n          \r\n        });\r\n\r\n\r\n       \r\n    }\r\n    connectToUser(stream,Id)\r\n        {\r\n            this.peer.call(Id,stream);\r\n        }\r\n    PeerEvent()\r\n    {\r\n        this.peer.on('open',(id) =>{\r\n            this.socket.emit('joining-room', this.roomId, id);\r\n            console.log('generated userId: '+id);\r\n        this.userId=id;});\r\n            this.setlocalstream();\r\n            \r\n    }\r\n    \r\n    setPeerListenres(stream)\r\n    {\r\n        this.peer.on('call', call =>{\r\n            call.answer(stream);\r\n\r\n            call.on('stream',(externalstream)=>{\r\n                this.addstream(externalstream,call.metadata.id)\r\n            })\r\n        })\r\n    }\r\n    setlocalstream()\r\n    { console.log(this);\r\n        \r\n       this.getvideoaudio().then((stream)=> {\r\n         this.localstream=stream;\r\n        this.addstream(stream,this.userId);\r\n        this.setPeerListenres(stream);\r\n      })\r\n      .catch(function(err) { console.log(err.name + \": \" + err.message); });\r\n     \r\n    }\r\n    getvideoaudio()\r\n    {\r\n        return navigator.mediaDevices.getUserMedia({video:true, audio:true});\r\n    }\r\n    \r\n    addstream(stream,Id)\r\n   {\r\n       const videogrid=document.getElementById('video-grid');\r\n      \r\n       const videoContainer = document.createElement('div');\r\n       const video = document.createElement('video');\r\n       video.srcObject =stream;// this.videoContainer[createObj.id].stream;\r\n       \r\n       video.autoplay = true;\r\n       if (this.userId === Id) video.muted = true;\r\n       videoContainer.appendChild(video)\r\n       videogrid.append(videoContainer);\r\n       console.log(\"done creating video\");\r\n       \r\n   }\r\n   \r\n\r\n}\r\n\r\n\r\nexport function createSocketConnectionInstance(settings={}) {\r\n    return  new SocketConnection(settings);\r\n}"]},"metadata":{},"sourceType":"module"}