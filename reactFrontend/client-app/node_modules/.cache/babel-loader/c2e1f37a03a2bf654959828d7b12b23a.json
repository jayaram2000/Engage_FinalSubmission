{"ast":null,"code":"import io from 'socket.io-client';\nimport Peer from 'peerjs';\n\nclass SocketConnection {\n  constructor(props) {\n    this.ENDPOINT = 'localhost:5000';\n    this.peer = new Peer();\n    this.socket = io(this.ENDPOINT);\n    this.roomId = props.roomId;\n    this.peer = new Peer();\n    this.socket = io(this.ENDPOINT);\n    console.log('inside the connection da ngotha :' + props.roomId);\n    this.socketEvent();\n    this.PeerEvent();\n  }\n\n  socketEvent() {\n    /* \r\n        */\n  }\n\n  PeerEvent() {\n    this.peer.on('open', id => {\n      this.userId = id;\n      console.log('generated userId: ' + id);\n      this.setlocalstream();\n      console.log(\"emitting joining room request\");\n      this.socket.emit('joining-room', this.roomId, id);\n    });\n  }\n\n  newUserConnection(stream) {\n    this.socket.on('user-joined', Id => {\n      console.log(\"joined use:\" + Id);\n      this.connectToUser(stream, Id);\n    });\n  }\n\n  connectToUser(stream, Id) {\n    const call = this.peer.call(Id, stream);\n    this.peer.on('error', err => {\n      console.log(\"ERROR\" + err);\n    });\n    console.log('made call to ' + Id + 'stream' + call);\n    call.on('stream', externalstream => {\n      this.addstream(externalstream, this.userId);\n    });\n    /* call.on('close',()=>{\r\n          var video=document.getElementById('Id');\r\n          video.remove();\r\n      })*/\n  }\n\n  setPeerListenres(stream) {\n    console.log('peerlisteners set');\n    this.peer.on('call', Call => {\n      console.log(\"recived call lamo\");\n      Call.answer(stream);\n      Call.on('stream', externalstream => {\n        console.log('incoming stream');\n        this.addstream(externalstream, this.userId);\n      });\n    });\n  }\n\n  setlocalstream() {\n    this.getvideoaudio().then(stream => {\n      this.localstream = stream;\n      this.addstream(stream, this.userId);\n      this.setPeerListenres(stream);\n      this.newUserConnection(stream);\n    }).catch(function (err) {\n      console.log(err.name + \": \" + err.message);\n    });\n  }\n\n  getvideoaudio() {\n    const myNavigator = navigator.mediaDevices.getUserMedia || navigator.mediaDevices.webkitGetUserMedia || navigator.mediaDevices.mozGetUserMedia || navigator.mediaDevices.msGetUserMedia;\n    return navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    });\n  }\n\n  addstream(stream, Id) {\n    const videogrid = document.getElementById('video-grid');\n    const videoContainer = document.createElement('div');\n    const video = document.createElement('video');\n    video.srcObject = stream; // this.videoContainer[createObj.id].stream;\n    // video.id=Id;\n\n    video.autoplay = true;\n    if (this.userId === Id) video.muted = true;\n    videoContainer.appendChild(video);\n    videogrid.append(videoContainer);\n    console.log(\"done creating video :\" + Id);\n  }\n\n}\n\nexport function createSocketConnectionInstance(settings = {}) {\n  return new SocketConnection(settings);\n}","map":{"version":3,"sources":["E:/Microsoft ENgae/reactFrontend/client-app/src/components/Connection.js"],"names":["io","Peer","SocketConnection","constructor","props","ENDPOINT","peer","socket","roomId","console","log","socketEvent","PeerEvent","on","id","userId","setlocalstream","emit","newUserConnection","stream","Id","connectToUser","call","err","externalstream","addstream","setPeerListenres","Call","answer","getvideoaudio","then","localstream","catch","name","message","myNavigator","navigator","mediaDevices","getUserMedia","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","video","audio","videogrid","document","getElementById","videoContainer","createElement","srcObject","autoplay","muted","appendChild","append","createSocketConnectionInstance","settings"],"mappings":"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","sourcesContent":["import io from 'socket.io-client';\r\nimport Peer from 'peerjs';\r\n\r\n\r\nclass SocketConnection {\r\n    ENDPOINT='localhost:5000';\r\n    peer= new Peer();\r\n    socket=io(this.ENDPOINT);\r\n  \r\n    constructor(props)\r\n    {\r\n        this.roomId=props.roomId;\r\n        this.peer=new Peer();\r\n        this.socket=io(this.ENDPOINT);\r\n        console.log('inside the connection da ngotha :'+props.roomId);\r\n        this.socketEvent();\r\n        this.PeerEvent();\r\n        \r\n        \r\n    }\r\n\r\n   \r\n    socketEvent()\r\n    {\r\n        \r\n      /* \r\n\r\n        */\r\n       \r\n    }\r\n    PeerEvent()\r\n    {\r\n       \r\n        this.peer.on('open',(id) =>{\r\n            this.userId=id;\r\n            console.log('generated userId: '+id);\r\n            this.setlocalstream();\r\n            console.log(\"emitting joining room request\")\r\n            this.socket.emit('joining-room', this.roomId, id);\r\n            \r\n            \r\n       });\r\n       \r\n      \r\n        \r\n    }\r\n\r\n    newUserConnection(stream)\r\n    {\r\n        this.socket.on('user-joined',(Id)=>{\r\n           \r\n            console.log(\"joined use:\"+Id);\r\n            this.connectToUser(stream,Id);\r\n            \r\n           \r\n            \r\n          \r\n        });\r\n\r\n    }\r\n    connectToUser(stream,Id)\r\n        {\r\n       \r\n            const call=this.peer.call(Id,stream);\r\n            this.peer.on('error',(err)=>{\r\n                console.log(\"ERROR\"+err);\r\n            })\r\n            console.log('made call to '+ Id+ 'stream'+call);\r\n            call.on('stream',(externalstream)=>{\r\n                this.addstream(externalstream,this.userId);\r\n            })\r\n          /* call.on('close',()=>{\r\n                var video=document.getElementById('Id');\r\n                video.remove();\r\n            })*/\r\n        }\r\n   \r\n    \r\n    setPeerListenres(stream)\r\n    {\r\n        console.log('peerlisteners set');\r\n        this.peer.on('call', (Call) =>{\r\n            console.log(\"recived call lamo\")\r\n            Call.answer(stream);\r\n            Call.on('stream',(externalstream)=>{\r\n             console.log('incoming stream');\r\n                \r\n                this.addstream(externalstream,this.userId);\r\n            })\r\n           \r\n        })\r\n    }\r\n    setlocalstream()\r\n    { \r\n        \r\n       this.getvideoaudio().then((stream)=> {\r\n         this.localstream=stream;\r\n        this.addstream(stream,this.userId);\r\n        this.setPeerListenres(stream);\r\n        this.newUserConnection(stream);\r\n      })\r\n      .catch(function(err) { console.log(err.name + \": \" + err.message); });\r\n     \r\n    }\r\n    getvideoaudio()\r\n    {\r\n        const myNavigator = navigator.mediaDevices.getUserMedia || navigator.mediaDevices.webkitGetUserMedia || navigator.mediaDevices.mozGetUserMedia || navigator.mediaDevices.msGetUserMedia;\r\n        return navigator.mediaDevices.getUserMedia({video:true, audio:true});\r\n    }\r\n    \r\n    addstream(stream,Id)\r\n   {\r\n       const videogrid=document.getElementById('video-grid');\r\n      \r\n       const videoContainer = document.createElement('div');\r\n       const video = document.createElement('video');\r\n       video.srcObject =stream;// this.videoContainer[createObj.id].stream;\r\n      // video.id=Id;\r\n       video.autoplay = true;\r\n       if (this.userId === Id) video.muted = true;\r\n       videoContainer.appendChild(video)\r\n       videogrid.append(videoContainer);\r\n       console.log(\"done creating video :\"+Id);\r\n       \r\n   }\r\n   \r\n\r\n}\r\n\r\n\r\nexport function createSocketConnectionInstance(settings={}) {\r\n    return  new SocketConnection(settings);\r\n}"]},"metadata":{},"sourceType":"module"}