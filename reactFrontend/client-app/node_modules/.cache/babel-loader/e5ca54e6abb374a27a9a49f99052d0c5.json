{"ast":null,"code":"import io from 'socket.io-client';\nimport Peer from 'peerjs';\n\nclass SocketConnection {\n  // peer= new Peer();\n  constructor(props) {\n    this.ENDPOINT = 'https://engage-video-app.herokuapp.com/';\n    this.peers = {};\n    this.videoContainer = {};\n    this.currentStream = null;\n    this.mediaRecorder = null;\n    this.screenShareStatus = true;\n    this.screenPresenter = false;\n    this.currentScreenShareID = null;\n    this.recordedChunks = [];\n    this.updatevalue = props.updatevalue;\n    this.roomId = props.roomId;\n    this.peer = new Peer();\n    this.socket = io(this.ENDPOINT);\n    console.log('inside the connection :' + props.roomId);\n    this.socketEvent();\n    this.PeerEvent();\n    document.getElementById('screen-share').style.display = \"none\";\n  }\n\n  socketEvent() {\n    this.socket.on('screen-share', ID => {\n      console.log('screen-share view for:', ID);\n      this.currentScreenShareID = ID;\n      this.screenShareStatus = !this.screenShareStatus;\n      this.updatevalue('screenShareStatus', this.screenShareStatus);\n      this.screenShareView(ID, this.videoContainer[ID]);\n    });\n    this.socket.on('screen-share-newUser', (sharingId, DestId) => {\n      if (DestId === this.userId) {\n        this.currentScreenShareID = sharingId;\n        this.screenShareStatus = !this.screenShareStatus;\n        this.updatevalue('screenShareStatus', this.screenShareStatus);\n        console.log(\"replace video ID for new user\", sharingId);\n        setTimeout(() => {\n          if (this.videoContainer[sharingId]) {\n            this.screenShareView(sharingId, this.videoContainer[sharingId]);\n          }\n        }, 1000);\n      }\n    });\n    this.socket.on('normal-view', ID => {\n      console.log('REvert view for:', ID);\n      this.screenShareStatus = !this.screenShareStatus;\n      this.updatevalue('screenShareStatus', this.screenShareStatus);\n      this.currentScreenShareID = null;\n      this.screenShareRevert(ID);\n    });\n    this.socket.on('user-left', Id => {\n      if (this.currentScreenShareID === Id) {\n        this.screenShareStatus = !this.screenShareStatus;\n        this.updatevalue('screenShareStatus', this.screenShareStatus);\n        this.currentScreenShareID = null;\n        this.screenShareRevert(Id);\n      }\n\n      this.removeuser(Id);\n    });\n    this.socket.on('new-message', (userName, message) => {\n      this.updatevalue('Incomingmessage', {\n        userName: userName,\n        messageBody: message\n      });\n    });\n    this.socket.on('newuserName', userName => {\n      this.updatevalue('newuserName', {\n        userName: userName,\n        messageBody: ' joined chat'\n      });\n    });\n    this.socket.on('userleftchat', userName => {\n      this.updatevalue('newuserName', {\n        userName: userName,\n        messageBody: ' left chat'\n      });\n    });\n  }\n\n  PeerEvent() {\n    this.peer.on('open', id => {\n      this.userId = id;\n      console.log('generated userId: ' + id);\n      this.setlocalstream();\n      console.log(\"emitting joining room request\");\n      var i = 0,\n          howManyTimes = 11;\n\n      const f = () => {\n        console.log(`waiting for joining room with ${i}`);\n\n        if (`${this.userId}` in this.videoContainer) {\n          this.socket.emit('joining-room', this.roomId, id);\n          console.log(this.videoContainer[id]);\n          i = 20;\n        }\n\n        i++;\n\n        if (i < howManyTimes) {\n          setTimeout(f, 1500);\n        }\n      };\n\n      f();\n      /*\r\n      while(val<10)\r\n      {\r\n          setTimeout(()=>{console.log(`waiting for joining room with ${val}`)},1500);\r\n          if(this.videoContainer[id])\r\n          {\r\n              this.socket.emit('joining-room', this.roomId, id);\r\n              console.log(this.videoContainer[id]);\r\n              break;\r\n          }\r\n          val=val+1;\r\n        }*/\n\n      if (i >= 10 && i < 20) {\n        alert('Check network connection and try again later!');\n      }\n    });\n    this.peer.on('error', err => {\n      console.log('reconnecting to peer', err);\n      alert(\"Check your internet connection and re-try\");\n      this.peer.reconnect();\n    });\n  }\n\n  newUserConnection() {\n    this.socket.on('user-joined', Id => {\n      console.log(\"joined use:\" + Id);\n\n      if (this.screenPresenter) {\n        this.socket.emit('screen-share-newUser', this.userId, Id);\n        console.log('screen-share req sent for new user');\n      }\n\n      this.connectToUser(this.currentStream, Id);\n    });\n  }\n\n  connectToUser(stream, Id) {\n    const call = this.peer.call(Id, stream, {\n      metadata: {\n        userId: this.userId\n      }\n    });\n    this.peer.on('error', err => {\n      console.log(\"ERROR\" + err);\n    });\n    console.log('made call to ' + Id + 'stream');\n    call.on('stream', externalstream => {\n      console.log('connteced user returned stream');\n      this.addstream(externalstream, Id);\n    });\n    this.peers[Id] = call.peerConnection;\n  }\n\n  setPeerListenres(stream) {\n    console.log('peerlisteners set');\n    this.peer.on('call', Call => {\n      Call.answer(stream);\n      Call.on('stream', externalstream => {\n        console.log('incoming stream');\n        this.peers[Call.metadata.userId] = Call.peerConnection;\n        this.addstream(externalstream, Call.metadata.userId);\n      });\n    });\n  }\n\n  setlocalstream() {\n    this.getvideoaudio(true, true).then(stream => {\n      this.localstream = stream;\n      this.currentStream = stream;\n      this.addstream(stream, this.userId);\n      this.setPeerListenres(this.currentStream);\n      this.newUserConnection();\n    }).catch(function (err) {\n      console.log(err.name + \": \" + err.message);\n    });\n  }\n\n  getvideoaudio(videostatus, micstatus) {\n    const myNavigator = navigator.mediaDevices.getUserMedia || navigator.mediaDevices.webkitGetUserMedia || navigator.mediaDevices.mozGetUserMedia || navigator.mediaDevices.msGetUserMedia;\n    return myNavigator({\n      video: videostatus,\n      audio: micstatus\n    });\n  }\n\n  addstream(stream, Id) {\n    if (!this.videoContainer[Id]) {\n      const videogrid = document.getElementById('video-grid');\n      this.videoContainer[Id] = stream;\n      const localcontainer = document.createElement('div');\n      const video = document.createElement('video');\n      video.srcObject = stream;\n      video.id = Id;\n      video.autoplay = true;\n      if (this.userId === Id) video.muted = true;\n      localcontainer.appendChild(video);\n      videogrid.append(localcontainer);\n      console.log(\"done creating video :\" + Id);\n    }\n  }\n\n  removeuser(Id) {\n    if (this.peers[Id]) this.peers[Id].close();\n    delete this.videoContainer[Id];\n    const video = document.getElementById(Id);\n    if (video) video.remove();\n    delete this.peers[Id];\n  }\n\n  videotoggle(videostatus) {\n    if (this.localstream) {\n      this.localstream.getVideoTracks()[0].enabled = !videostatus;\n      this.updatevalue('videoStatus', !videostatus);\n    }\n  }\n\n  mictoggle(micStatus) {\n    if (this.localstream) {\n      this.localstream.getAudioTracks()[0].enabled = !micStatus;\n      this.updatevalue('micStatus', !micStatus);\n    }\n  }\n\n  screenShareView(Id, mediaStream) {\n    var video = document.getElementById(Id);\n\n    if (video) {\n      video.pause();\n      video.style.display = \"none\";\n    }\n\n    const tmp = document.getElementById('screen-share');\n    tmp.style.display = \"inline\";\n    tmp.srcObject = mediaStream;\n    tmp.autoplay = true;\n    console.log(\"video elemnt\", tmp);\n  }\n\n  screenShareRevert(Id) {\n    const tmp = document.getElementById('screen-share');\n\n    if (tmp) {\n      tmp.pause();\n      tmp.srcObject = null;\n      tmp.style.display = \"none\";\n    }\n\n    var video = document.getElementById(Id);\n\n    if (video) {\n      video.style.display = \"inline\";\n      video.play();\n    }\n  }\n\n  screenSharetoggle(toggle) {\n    if (toggle) {\n      if (!this.screenShareStatus) return;\n      navigator.mediaDevices.getDisplayMedia({\n        video: {\n          cursor: \"always\"\n        },\n        audio: {\n          echoCancellation: true,\n          noiseSuppression: true\n        }\n      }).then(mediaStream => {\n        mediaStream.getVideoTracks()[0].onended = () => {\n          this.stopscreen();\n        };\n\n        if (mediaStream) {\n          this.socket.emit('screen-share', this.userId);\n          console.log('screen-share req sent');\n          this.currentStream = mediaStream;\n          this.screenShareStatus = !this.screenShareStatus;\n          this.updatevalue('screenShareStatus', this.screenShareStatus);\n          this.screenPresenter = !this.screenPresenter;\n          this.updatevalue('screenPresenter', this.screenPresenter);\n          this.screenShareView(this.userId, mediaStream);\n\n          for (const [key, value] of Object.entries(this.peers)) {\n            value.getSenders().map(sender => {\n              if (sender.track.kind == \"video\") {\n                if (mediaStream.getVideoTracks().length > 0) {\n                  sender.replaceTrack(mediaStream.getVideoTracks()[0]);\n                }\n              }\n            });\n          }\n        }\n      }).catch(err => {\n        console.log(\"unable to get screen stream\" + err);\n      });\n    } else {\n      this.stopscreen();\n    }\n  }\n\n  stopscreen() {\n    if (!this.screenPresenter) return;\n    this.socket.emit('normal-view', this.userId);\n    this.screenPresenter = !this.screenPresenter;\n    this.screenShareStatus = !this.screenShareStatus;\n    this.updatevalue('screenShareStatus', this.screenShareStatus);\n    this.updatevalue('screenPresenter', this.screenPresenter);\n    this.screenShareRevert(this.userId);\n    var video = document.getElementById(this.userId);\n\n    if (video) {\n      video.pause();\n      video.srcObject = this.localstream;\n      video.play();\n    }\n\n    this.currentStream = this.localstream;\n\n    for (const [key, value] of Object.entries(this.peers)) {\n      value.getSenders().map(sender => {\n        if (sender.track.kind == \"video\") {\n          if (this.localstream.getVideoTracks().length > 0) {\n            sender.replaceTrack(this.localstream.getVideoTracks()[0]);\n          }\n        }\n      });\n    }\n  }\n\n  recordScreen(recordStatus) {\n    if (recordStatus) {\n      navigator.mediaDevices.getDisplayMedia({\n        video: {\n          cursor: \"always\"\n        },\n        audio: {\n          echoCancellation: true,\n          noiseSuppression: true\n        }\n      }).then(mediaStream => {\n        this.mediaRecorder = new MediaRecorder(mediaStream);\n        this.startrecording();\n\n        mediaStream.getVideoTracks()[0].onended = () => {\n          this.endrecording();\n        };\n      }).catch(err => {\n        console.log(\"unable to get screen stream for recording\" + err);\n      });\n    } else {\n      // this.mediaRecorder.stop();\n      this.endrecording();\n    }\n  }\n\n  startrecording() {\n    this.updatevalue('recordStatus', false);\n    console.log(\"starting\", this.mediaRecorder);\n\n    this.mediaRecorder.ondataavailable = event => {\n      console.log(\"ondataavail\", event);\n\n      if (event.data.size > 0) {\n        this.recordedChunks.push(event.data);\n      }\n    };\n\n    this.mediaRecorder.onstop = () => {\n      const blob = new Blob(this.recordedChunks, {\n        'type': 'video/mp4'\n      }); // {type: this.recordedChunks[0]});//'video/webm'});\n\n      console.log(this.recordedChunks.length);\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.style.display = 'none';\n      a.href = url;\n      var today = new Date();\n      var date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();\n      var time = today.getHours() + ':' + today.getMinutes() + ':' + today.getSeconds();\n      var dateTime = date + '-' + time;\n      a.download = 'Recording/' + dateTime + '.mp4';\n      document.body.appendChild(a);\n      a.click();\n      setTimeout(() => {\n        document.body.removeChild(a);\n        window.URL.revokeObjectURL(url);\n      }, 200);\n      this.recordedChunks = [];\n    };\n\n    this.mediaRecorder.start(1500);\n  }\n\n  endrecording() {\n    if (this.mediaRecorder) {\n      console.log(\"ending\", this.mediaRecorder);\n      this.updatevalue('recordStatus', true);\n      this.mediaRecorder.stop();\n      this.mediaRecorder = null;\n    }\n  }\n\n  broadcastmessage(newmessage, userName) {\n    if (this.socket) {\n      this.socket.emit('new-message', userName, newmessage);\n    }\n  }\n\n  exitcall(username) {\n    if (this.screenPresenter) {\n      this.socket.emit('normal-view', this.userId);\n    }\n\n    this.socket.emit('userleftchat', username);\n    this.socket.disconnect();\n\n    if (this.videoContainer[this.userId]) {\n      const Tracks = this.videoContainer[this.userId].getTracks();\n      Tracks.forEach(element => {\n        element.stop();\n      });\n    }\n\n    delete this.videoContainer;\n    delete this.peer;\n    delete this.peers;\n  }\n\n  newuserChat(name) {\n    setTimeout(() => {\n      if (this.socket) {\n        this.socket.emit('newuserName', name);\n      }\n    }, 1500);\n  }\n\n}\n\nexport function createSocketConnectionInstance(settings = {}) {\n  return new SocketConnection(settings);\n}","map":{"version":3,"sources":["E:/Microsoft ENgae/reactFrontend/client-app/src/components/Connection.js"],"names":["io","Peer","SocketConnection","constructor","props","ENDPOINT","peers","videoContainer","currentStream","mediaRecorder","screenShareStatus","screenPresenter","currentScreenShareID","recordedChunks","updatevalue","roomId","peer","socket","console","log","socketEvent","PeerEvent","document","getElementById","style","display","on","ID","screenShareView","sharingId","DestId","userId","setTimeout","screenShareRevert","Id","removeuser","userName","message","messageBody","id","setlocalstream","i","howManyTimes","f","emit","alert","err","reconnect","newUserConnection","connectToUser","stream","call","metadata","externalstream","addstream","peerConnection","setPeerListenres","Call","answer","getvideoaudio","then","localstream","catch","name","videostatus","micstatus","myNavigator","navigator","mediaDevices","getUserMedia","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","video","audio","videogrid","localcontainer","createElement","srcObject","autoplay","muted","appendChild","append","close","remove","videotoggle","getVideoTracks","enabled","mictoggle","micStatus","getAudioTracks","mediaStream","pause","tmp","play","screenSharetoggle","toggle","getDisplayMedia","cursor","echoCancellation","noiseSuppression","onended","stopscreen","key","value","Object","entries","getSenders","map","sender","track","kind","length","replaceTrack","recordScreen","recordStatus","MediaRecorder","startrecording","endrecording","ondataavailable","event","data","size","push","onstop","blob","Blob","url","URL","createObjectURL","a","href","today","Date","date","getFullYear","getMonth","getDate","time","getHours","getMinutes","getSeconds","dateTime","download","body","click","removeChild","window","revokeObjectURL","start","stop","broadcastmessage","newmessage","exitcall","username","disconnect","Tracks","getTracks","forEach","element","newuserChat","createSocketConnectionInstance","settings"],"mappings":"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","sourcesContent":["import io from 'socket.io-client';\r\nimport Peer from 'peerjs';\r\n\r\n\r\nclass SocketConnection {\r\n    ENDPOINT='https://engage-video-app.herokuapp.com/';\r\n   // peer= new Peer();\r\n    peers={};\r\n    videoContainer={};\r\n    currentStream=null;\r\n    mediaRecorder=null;\r\n    screenShareStatus=true;\r\n    screenPresenter=false;\r\n    currentScreenShareID=null;\r\n    recordedChunks=[];\r\n    constructor(props)\r\n    {   this.updatevalue=props.updatevalue;\r\n        this.roomId=props.roomId;\r\n        this.peer=new Peer();\r\n        this.socket=io(this.ENDPOINT);\r\n        console.log('inside the connection :'+props.roomId);\r\n        this.socketEvent();\r\n        this.PeerEvent();\r\n        document.getElementById('screen-share').style.display = \"none\";\r\n       \r\n        \r\n    }\r\n\r\n    socketEvent()\r\n    {\r\n        this.socket.on('screen-share',(ID)=>{\r\n            console.log('screen-share view for:',ID);\r\n            this.currentScreenShareID=ID;\r\n            this.screenShareStatus=!this.screenShareStatus;\r\n            this.updatevalue('screenShareStatus',this.screenShareStatus);\r\n           this.screenShareView(ID,this.videoContainer[ID]);\r\n        })\r\n        this.socket.on('screen-share-newUser',(sharingId,DestId)=>{\r\n            if(DestId===this.userId)\r\n            {\r\n                this.currentScreenShareID=sharingId;\r\n                this.screenShareStatus=!this.screenShareStatus;\r\n                this.updatevalue('screenShareStatus',this.screenShareStatus);\r\n                console.log(\"replace video ID for new user\",sharingId);\r\n               \r\n                   setTimeout(()=>{ if(this.videoContainer[sharingId]){this.screenShareView(sharingId,this.videoContainer[sharingId])}},1000);\r\n               \r\n                \r\n            }\r\n        })\r\n        this.socket.on('normal-view',(ID)=>{\r\n            console.log('REvert view for:',ID);\r\n            this.screenShareStatus=!this.screenShareStatus;\r\n            this.updatevalue('screenShareStatus',this.screenShareStatus);\r\n            this.currentScreenShareID=null;\r\n            this.screenShareRevert(ID);\r\n        })\r\n\r\n        this.socket.on('user-left',(Id)=>{\r\n            if(this.currentScreenShareID===Id)\r\n            { this.screenShareStatus=!this.screenShareStatus;\r\n                this.updatevalue('screenShareStatus',this.screenShareStatus);\r\n                this.currentScreenShareID=null;\r\n                this.screenShareRevert(Id);\r\n            }\r\n            this.removeuser(Id);\r\n        })\r\n\r\n        this.socket.on('new-message',(userName,message)=>{\r\n          \r\n            this.updatevalue('Incomingmessage',{userName:userName, messageBody:message});  \r\n           \r\n        })\r\n\r\n        this.socket.on('newuserName',(userName)=>{\r\n            this.updatevalue('newuserName',{userName:userName,messageBody: ' joined chat'});\r\n        })\r\n        this.socket.on('userleftchat',(userName)=>{\r\n            this.updatevalue('newuserName',{userName:userName,messageBody: ' left chat'});\r\n        })\r\n       \r\n    }\r\n\r\n    PeerEvent()\r\n    {\r\n       \r\n        this.peer.on('open',(id) =>{\r\n            this.userId=id;\r\n            console.log('generated userId: '+id);\r\n            this.setlocalstream();\r\n            console.log(\"emitting joining room request\")\r\n         \r\n            var i = 0, howManyTimes = 11;\r\n\r\n            const f=()=>{\r\n            console.log(`waiting for joining room with ${i}`)\r\n            if(`${this.userId}` in this.videoContainer)\r\n                {\r\n                    this.socket.emit('joining-room', this.roomId, id);\r\n                    console.log(this.videoContainer[id]);\r\n                    i=20;\r\n                }\r\n            i++;\r\n            if (i < howManyTimes) {\r\n                setTimeout(f, 1500);\r\n            }\r\n            }\r\n\r\n            f();\r\n            /*\r\n            while(val<10)\r\n            {\r\n                setTimeout(()=>{console.log(`waiting for joining room with ${val}`)},1500);\r\n                if(this.videoContainer[id])\r\n                {\r\n                    this.socket.emit('joining-room', this.roomId, id);\r\n                    console.log(this.videoContainer[id]);\r\n                    break;\r\n                }\r\n                val=val+1;\r\n\r\n            }*/\r\n            if(i>=10 && i<20)\r\n            {\r\n                alert('Check network connection and try again later!');\r\n            }\r\n           \r\n               \r\n       });\r\n\r\n\r\n       this.peer.on('error',(err)=>{\r\n           console.log('reconnecting to peer',err);\r\n           alert(\"Check your internet connection and re-try\");\r\n           this.peer.reconnect();\r\n       });\r\n      \r\n        \r\n    }\r\n\r\n    newUserConnection()\r\n    {\r\n        this.socket.on('user-joined',(Id)=>{\r\n           \r\n            console.log(\"joined use:\"+Id);\r\n          \r\n            if(this.screenPresenter)\r\n            {\r\n                this.socket.emit('screen-share-newUser',this.userId,Id);\r\n                console.log('screen-share req sent for new user');\r\n            }\r\n                this.connectToUser(this.currentStream,Id);\r\n            \r\n            \r\n            \r\n        });\r\n      \r\n\r\n    }\r\n    connectToUser(stream,Id)\r\n        {\r\n       \r\n            const call=this.peer.call(Id,stream,{ metadata: { userId: this.userId } });\r\n            this.peer.on('error',(err)=>{\r\n                console.log(\"ERROR\"+err);\r\n            })\r\n            console.log('made call to '+ Id+ 'stream');\r\n            call.on('stream',(externalstream)=>{\r\n                console.log('connteced user returned stream');\r\n                this.addstream(externalstream,Id);\r\n            })\r\n           \r\n            this.peers[Id]=call.peerConnection;\r\n          \r\n        }\r\n   \r\n    \r\n    setPeerListenres(stream)\r\n    {\r\n        console.log('peerlisteners set');\r\n        this.peer.on('call', (Call) =>{\r\n           \r\n            Call.answer(stream);\r\n            Call.on('stream',(externalstream)=>{\r\n             console.log('incoming stream');\r\n             this.peers[Call.metadata.userId]=Call.peerConnection;\r\n                this.addstream(externalstream,Call.metadata.userId);\r\n            })\r\n          \r\n        })\r\n    }\r\n\r\n\r\n    setlocalstream()\r\n    { \r\n        \r\n       this.getvideoaudio(true,true).then((stream)=> {\r\n         this.localstream=stream;\r\n         this.currentStream=stream;\r\n        this.addstream(stream,this.userId);\r\n        this.setPeerListenres(this.currentStream);\r\n        this.newUserConnection();\r\n      })\r\n      .catch(function(err) { console.log(err.name + \": \" + err.message); });\r\n     \r\n    }\r\n\r\n\r\n    getvideoaudio(videostatus,micstatus)\r\n    {\r\n        const myNavigator = navigator.mediaDevices.getUserMedia || navigator.mediaDevices.webkitGetUserMedia || navigator.mediaDevices.mozGetUserMedia || navigator.mediaDevices.msGetUserMedia;\r\n        return myNavigator({video:videostatus,audio :micstatus});\r\n    }\r\n    \r\n    \r\n    addstream(stream,Id)\r\n   {\r\n       if(!this.videoContainer[Id])\r\n       {\r\n        const videogrid=document.getElementById('video-grid');\r\n      \r\n        this.videoContainer[Id]=stream;\r\n        const localcontainer = document.createElement('div');\r\n        const video = document.createElement('video');\r\n        video.srcObject =stream;\r\n        video.id=Id;\r\n        video.autoplay = true;\r\n        if (this.userId === Id) video.muted = true;\r\n        localcontainer.appendChild(video)\r\n        videogrid.append(localcontainer);\r\n        console.log(\"done creating video :\"+Id);\r\n       \r\n        \r\n       }\r\n      \r\n   }\r\n\r\n   removeuser(Id)\r\n   {\r\n    if(this.peers[Id])this.peers[Id].close();\r\n    delete this.videoContainer[Id];\r\n    const video = document.getElementById(Id);\r\n    if (video) video.remove();\r\n    delete this.peers[Id];\r\n    \r\n\r\n   }\r\n   \r\n\r\n\r\n   videotoggle(videostatus)\r\n   {\r\n       if(this.localstream)\r\n       {\r\n        this.localstream.getVideoTracks()[0].enabled =!videostatus; \r\n        this.updatevalue('videoStatus',!videostatus);\r\n       }\r\n   \r\n   }\r\n\r\n\r\n   mictoggle(micStatus)\r\n   {\r\n       if(this.localstream)\r\n       {    \r\n        this.localstream.getAudioTracks()[0].enabled =!micStatus;\r\n        this.updatevalue('micStatus',!micStatus);\r\n\r\n       }\r\n    \r\n   }\r\n\r\n   screenShareView(Id,mediaStream)\r\n   {\r\n    var video = document.getElementById(Id);\r\n          if(video)\r\n          {\r\n            video.pause();\r\n            video.style.display=\"none\";\r\n         \r\n          }\r\n        const tmp=document.getElementById('screen-share');\r\n        tmp.style.display=\"inline\";\r\n        tmp.srcObject=mediaStream;\r\n        tmp.autoplay=true;\r\n        console.log(\"video elemnt\",tmp);\r\n\r\n   }\r\n\r\n   screenShareRevert(Id)\r\n   {\r\n    const tmp=document.getElementById('screen-share');\r\n    if(tmp)\r\n    {\r\n        tmp.pause();\r\n        tmp.srcObject=null;\r\n        tmp.style.display=\"none\";\r\n    }\r\n    var video = document.getElementById(Id);\r\n          if(video)\r\n          {\r\n           \r\n            video.style.display=\"inline\";\r\n            video.play();\r\n          }\r\n  \r\n   \r\n    \r\n   }\r\n\r\n   screenSharetoggle(toggle)\r\n   { \r\n\r\n       if(toggle)\r\n       {\r\n        if(!this.screenShareStatus)\r\n    return;\r\n   \r\n    \r\n            navigator.mediaDevices.getDisplayMedia({\r\n           video: {\r\n               cursor: \"always\"\r\n           },\r\n           audio: {\r\n               echoCancellation: true,\r\n               noiseSuppression: true\r\n\r\n           }\r\n            }).then((mediaStream)=>{\r\n        \r\n        \r\n        \r\n           mediaStream.getVideoTracks()[0].onended=()=>\r\n           {\r\n             \r\n           this.stopscreen();\r\n           }\r\n     \r\n           if(mediaStream)\r\n           {\r\n             this.socket.emit('screen-share',this.userId);\r\n             console.log('screen-share req sent');\r\n             this.currentStream=mediaStream;\r\n             this.screenShareStatus=!this.screenShareStatus;\r\n             this.updatevalue('screenShareStatus',this.screenShareStatus);\r\n             this.screenPresenter=!this.screenPresenter;\r\n             this.updatevalue('screenPresenter',this.screenPresenter);\r\n             this.screenShareView(this.userId,mediaStream);\r\n           \r\n          \r\n            for (const [key, value] of Object.entries(this.peers)) {\r\n            \r\n                value.getSenders().map((sender) => {\r\n                \r\n                    if(sender.track.kind == \"video\") {\r\n                        if(mediaStream.getVideoTracks().length > 0){\r\n                            sender.replaceTrack(mediaStream.getVideoTracks()[0]);\r\n                        }\r\n                    }\r\n                });\r\n                 }\r\n         \r\n             }\r\n          \r\n         \r\n\r\n            }).catch((err)=>{\r\n             console.log(\"unable to get screen stream\"+err)\r\n            })\r\n\r\n       }\r\n       else\r\n       {\r\n        this.stopscreen();\r\n       }\r\n    \r\n           \r\n   }\r\n   \r\n \r\n    stopscreen()\r\n    {if(!this.screenPresenter)\r\n        return;\r\n        \r\n       this.socket.emit('normal-view',this.userId);\r\n       this.screenPresenter=!this.screenPresenter;\r\n       this.screenShareStatus=!this.screenShareStatus;\r\n       this.updatevalue('screenShareStatus',this.screenShareStatus);\r\n       this.updatevalue('screenPresenter',this.screenPresenter);\r\n        this.screenShareRevert(this.userId);\r\n        var video = document.getElementById(this.userId);\r\n        if(video)\r\n        {\r\n            video.pause();\r\n            video.srcObject = this.localstream;\r\n            video.play();\r\n        }\r\n         \r\n          this.currentStream=this.localstream\r\n        for (const [key, value] of Object.entries(this.peers)) {\r\n            \r\n            value.getSenders().map((sender) => {\r\n            \r\n                if(sender.track.kind == \"video\") {\r\n                    if(this.localstream.getVideoTracks().length > 0){\r\n                        sender.replaceTrack(this.localstream.getVideoTracks()[0]);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    recordScreen(recordStatus){\r\n\r\n        if(recordStatus)\r\n        {\r\n            navigator.mediaDevices.getDisplayMedia({\r\n                video: {\r\n                    cursor: \"always\"\r\n                },\r\n                audio: {\r\n                    echoCancellation: true,\r\n                    noiseSuppression: true\r\n     \r\n                }\r\n            }).then((mediaStream)=>{\r\n               \r\n             \r\n                this.mediaRecorder=new MediaRecorder(mediaStream);\r\n               this.startrecording();\r\n               mediaStream.getVideoTracks()[0].onended=()=>\r\n               {\r\n                 \r\n               this.endrecording();\r\n               }\r\n            \r\n            }).catch((err)=>{\r\n                console.log(\"unable to get screen stream for recording\"+err)\r\n            })\r\n            \r\n        }\r\n        else \r\n        {\r\n           // this.mediaRecorder.stop();\r\n            this.endrecording();\r\n           \r\n        }\r\n        \r\n    }\r\n\r\n    startrecording()\r\n    {   \r\n        this.updatevalue('recordStatus',false);\r\n       \r\n        console.log(\"starting\",this.mediaRecorder);\r\n      \r\n       this.mediaRecorder.ondataavailable=(event)=>{\r\n        console.log(\"ondataavail\",event);\r\n        if (event.data.size > 0) {\r\n            this.recordedChunks.push(event.data);\r\n                }\r\n            }   \r\n\r\n        this.mediaRecorder.onstop=()=>{\r\n                const blob = new Blob(this.recordedChunks,{'type': 'video/mp4'});// {type: this.recordedChunks[0]});//'video/webm'});\r\n                console.log(this.recordedChunks.length);\r\n                const url = URL.createObjectURL(blob);\r\n                const a = document.createElement('a');\r\n                a.style.display = 'none';\r\n                a.href = url;\r\n                var today = new Date();\r\n                var date = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();\r\n                var time = today.getHours() + ':' + today.getMinutes() + ':' + today.getSeconds();\r\n                var dateTime = date+'-'+time;\r\n                a.download = 'Recording/'+dateTime+'.mp4';\r\n                document.body.appendChild(a);\r\n                a.click();\r\n               setTimeout(() => {\r\n                  document.body.removeChild(a);\r\n                  window.URL.revokeObjectURL(url);\r\n                }, 200);\r\n                this.recordedChunks=[];\r\n            }\r\n    this.mediaRecorder.start(1500);\r\n    }\r\n    \r\n    \r\n    endrecording()\r\n    {\r\n        if(this.mediaRecorder)\r\n        {\r\n            console.log(\"ending\",this.mediaRecorder);\r\n            this.updatevalue('recordStatus',true);\r\n            this.mediaRecorder.stop();\r\n            this.mediaRecorder=null;\r\n              \r\n        }\r\n       \r\n    }\r\n\r\n\r\n\r\n    broadcastmessage(newmessage,userName)\r\n    {\r\n        if(this.socket)\r\n        {\r\n            this.socket.emit('new-message',userName,newmessage);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    exitcall(username)\r\n    {\r\n     \r\n     if(this.screenPresenter)\r\n     {\r\n        this.socket.emit('normal-view',this.userId);\r\n     }\r\n     this.socket.emit('userleftchat',username);\r\n     this.socket.disconnect();\r\n     if(this.videoContainer[this.userId])\r\n     {\r\n         const Tracks = this.videoContainer[this.userId].getTracks();\r\n         Tracks.forEach(element => {element.stop();\r\n             \r\n         });\r\n     }\r\n    \r\n        delete(this.videoContainer);\r\n        delete(this.peer);\r\n        delete(this.peers);\r\n       \r\n    }\r\n \r\n   newuserChat(name)\r\n   {\r\n    setTimeout(()=>{ if(this.socket)\r\n        {\r\n         this.socket.emit('newuserName',name);\r\n        }},1500);\r\n      \r\n   }\r\n   \r\n\r\n}\r\n\r\n\r\nexport function createSocketConnectionInstance(settings={}) {\r\n    return  new SocketConnection(settings);\r\n}"]},"metadata":{},"sourceType":"module"}