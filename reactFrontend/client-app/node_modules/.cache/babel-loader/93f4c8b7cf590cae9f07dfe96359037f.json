{"ast":null,"code":"var _jsxFileName = \"E:\\\\Microsoft ENgae\\\\reactFrontend\\\\client-app\\\\src\\\\components\\\\DraggableComponent.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst quickAndDirtyStyle = {\n  width: \"200px\",\n  height: \"200px\",\n  background: \"#FF9900\",\n  color: \"#FFFFFF\",\n  display: \"flex\",\n  justifyContent: \"center\",\n  alignItems: \"center\"\n};\n\nconst DraggableComponent = () => {\n  _s();\n\n  const [pressed, setPressed] = useState(false);\n  const [position, setPosition] = useState({\n    x: 0,\n    y: 0\n  });\n  const ref = useRef(); // Monitor changes to position state and update DOM\n\n  useEffect(() => {\n    if (ref.current) {\n      ref.current.style.transform = `translate(${position.x}px, ${position.y}px)`;\n    }\n  }, [position]); // Update the current position if mouse is down\n\n  const onMouseMove = event => {\n    if (pressed) {\n      setPosition({\n        x: position.x + event.movementX,\n        y: position.y + event.movementY\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: ref,\n    style: quickAndDirtyStyle,\n    onMouseMove: onMouseMove,\n    onMouseDown: () => setPressed(true),\n    onMouseUp: () => setPressed(false),\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: pressed ? \"Dragging...\" : \"Press to drag\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n\n_s(DraggableComponent, \"7jOuDYwFtigNTma/K3xP0jpmkeE=\");\n\n_c = DraggableComponent;\nexport default DraggableComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"DraggableComponent\");","map":{"version":3,"sources":["E:/Microsoft ENgae/reactFrontend/client-app/src/components/DraggableComponent.js"],"names":["React","useRef","useState","useEffect","quickAndDirtyStyle","width","height","background","color","display","justifyContent","alignItems","DraggableComponent","pressed","setPressed","position","setPosition","x","y","ref","current","style","transform","onMouseMove","event","movementX","movementY"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,EAAkCC,SAAlC,QAAmD,OAAnD;;AAEA,MAAMC,kBAAkB,GAAG;AACzBC,EAAAA,KAAK,EAAE,OADkB;AAEzBC,EAAAA,MAAM,EAAE,OAFiB;AAGzBC,EAAAA,UAAU,EAAE,SAHa;AAIzBC,EAAAA,KAAK,EAAE,SAJkB;AAKzBC,EAAAA,OAAO,EAAE,MALgB;AAMzBC,EAAAA,cAAc,EAAE,QANS;AAOzBC,EAAAA,UAAU,EAAE;AAPa,CAA3B;;AAUA,MAAMC,kBAAkB,GAAG,MAAM;AAAA;;AAC/B,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACa,QAAD,EAAWC,WAAX,IAA0Bd,QAAQ,CAAC;AAACe,IAAAA,CAAC,EAAE,CAAJ;AAAOC,IAAAA,CAAC,EAAE;AAAV,GAAD,CAAxC;AACA,QAAMC,GAAG,GAAGlB,MAAM,EAAlB,CAH+B,CAK/B;;AACAE,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIgB,GAAG,CAACC,OAAR,EAAiB;AACfD,MAAAA,GAAG,CAACC,OAAJ,CAAYC,KAAZ,CAAkBC,SAAlB,GAA+B,aAAYP,QAAQ,CAACE,CAAE,OAAMF,QAAQ,CAACG,CAAE,KAAvE;AACD;AACF,GAJQ,EAIN,CAACH,QAAD,CAJM,CAAT,CAN+B,CAY/B;;AACA,QAAMQ,WAAW,GAAIC,KAAD,IAAW;AAC7B,QAAIX,OAAJ,EAAa;AACXG,MAAAA,WAAW,CAAC;AACVC,QAAAA,CAAC,EAAEF,QAAQ,CAACE,CAAT,GAAaO,KAAK,CAACC,SADZ;AAEVP,QAAAA,CAAC,EAAEH,QAAQ,CAACG,CAAT,GAAaM,KAAK,CAACE;AAFZ,OAAD,CAAX;AAID;AACF,GAPD;;AASA,sBACE;AACE,IAAA,GAAG,EAAGP,GADR;AAEE,IAAA,KAAK,EAAGf,kBAFV;AAGE,IAAA,WAAW,EAAGmB,WAHhB;AAIE,IAAA,WAAW,EAAG,MAAMT,UAAU,CAAC,IAAD,CAJhC;AAKE,IAAA,SAAS,EAAG,MAAMA,UAAU,CAAC,KAAD,CAL9B;AAAA,2BAME;AAAA,gBAAKD,OAAO,GAAG,aAAH,GAAmB;AAA/B;AAAA;AAAA;AAAA;AAAA;AANF;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CAhCD;;GAAMD,kB;;KAAAA,kB;AAkCN,eAAeA,kBAAf","sourcesContent":["import React, { useRef, useState, useEffect } from 'react'\r\n\r\nconst quickAndDirtyStyle = {\r\n  width: \"200px\",\r\n  height: \"200px\",\r\n  background: \"#FF9900\",\r\n  color: \"#FFFFFF\",\r\n  display: \"flex\",\r\n  justifyContent: \"center\",\r\n  alignItems: \"center\"\r\n}\r\n\r\nconst DraggableComponent = () => {\r\n  const [pressed, setPressed] = useState(false)\r\n  const [position, setPosition] = useState({x: 0, y: 0})\r\n  const ref = useRef()\r\n\r\n  // Monitor changes to position state and update DOM\r\n  useEffect(() => {\r\n    if (ref.current) {\r\n      ref.current.style.transform = `translate(${position.x}px, ${position.y}px)`\r\n    }\r\n  }, [position])\r\n\r\n  // Update the current position if mouse is down\r\n  const onMouseMove = (event) => {\r\n    if (pressed) {\r\n      setPosition({\r\n        x: position.x + event.movementX,\r\n        y: position.y + event.movementY\r\n      })\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div\r\n      ref={ ref }\r\n      style={ quickAndDirtyStyle }\r\n      onMouseMove={ onMouseMove }\r\n      onMouseDown={ () => setPressed(true) }\r\n      onMouseUp={ () => setPressed(false) }>\r\n      <p>{ pressed ? \"Dragging...\" : \"Press to drag\" }</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DraggableComponent"]},"metadata":{},"sourceType":"module"}