{"ast":null,"code":"var _jsxFileName = \"E:\\\\Microsoft ENgae\\\\reactFrontend\\\\client-app\\\\src\\\\components\\\\MeetWindow.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { createSocketConnectionInstance } from './Connection';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MeetWindow = props => {\n  _s();\n\n  // const ENDPOINT='localhost:5000';\n  const [roomId, setRoom] = useState(props.location.pathname.substring(1));\n  /*const [userId, setUserId]= useState(null);\r\n    const peer=new Peer();\r\n    const [videoarray,setvideoarray]=useState(null);\r\n    const [localvideo,setlocalvideo]=useState(null);\r\n    const videogrid=document.querySelector('video-grid');\r\n    \r\n   const addstream =(video,stream)=>{\r\n     \r\n     video.srcObject=stream;\r\n    \r\n     video.onloadedmetadata = function(e) {\r\n      video.play();\r\n    };\r\n      videogrid.append(video);\r\n   \r\n   }\r\n  */\n\n  useEffect(() => {\n    socketInstance = createSocketConnectionInstance({\n      roomId: roomId\n    });\n    /*\r\n    console.log(`connecting to server:${ENDPOINT} `);\r\n    socket = io(ENDPOINT);\r\n    peer.on('open',id =>{\r\n    setUserId(id);\r\n    navigator.mediaDevices.getUserMedia({video:true})\r\n    .then(function(mediaStream) {\r\n    const video=document.createElement('video');\r\n    addstream(mediaStream);\r\n    })\r\n    .catch(function(err) { console.log(err.name + \": \" + err.message); });\r\n      socket.emit('joining-room', roomId, id);\r\n    })\r\n    \n    socket.on('user-joined',(Id)=>{\r\n     \r\n    \r\n    \r\n             \r\n    });\r\n    console.log('ID:'+userId);\r\n        \r\n    \r\n    return () => {\r\n      socket.emit('disconnet');\r\n      socket.off();\r\n    }\r\n           */\n  }, [socketInstance]);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"hello there \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 28\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"video-grid\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 50\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 12\n  }, this);\n};\n\n_s(MeetWindow, \"j0cmphBS9Fo0+Z/XFh4EsN7TJSk=\");\n\n_c = MeetWindow;\nexport default MeetWindow;\n\nvar _c;\n\n$RefreshReg$(_c, \"MeetWindow\");","map":{"version":3,"sources":["E:/Microsoft ENgae/reactFrontend/client-app/src/components/MeetWindow.jsx"],"names":["React","useState","useEffect","createSocketConnectionInstance","MeetWindow","props","roomId","setRoom","location","pathname","substring","socketInstance"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AAEA,SAAQC,8BAAR,QAA6C,cAA7C;;;AAGA,MAAMC,UAAU,GAAGC,KAAD,IAAS;AAAA;;AACxB;AACC,QAAM,CAACC,MAAD,EAASC,OAAT,IAAoBN,QAAQ,CAACI,KAAK,CAACG,QAAN,CAAeC,QAAf,CAAwBC,SAAxB,CAAkC,CAAlC,CAAD,CAAlC;AACF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGIR,EAAAA,SAAS,CAAC,MAAM;AAEdS,IAAAA,cAAc,GAAER,8BAA8B,CAAC;AAC7CG,MAAAA,MAAM,EAACA;AADsC,KAAD,CAA9C;AAEI;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAgBK,GA/CQ,EA+CP,CAACK,cAAD,CA/CO,CAAT;AAiDA,sBAAO,QAAC,KAAD,CAAO,QAAP;AAAA,4BAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAhB,oBAAsC;AAAK,MAAA,EAAE,EAAC;AAAR;AAAA;AAAA;AAAA;AAAA,YAAtC;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACH,CAxED;;GAAMP,U;;KAAAA,U;AA0EN,eAAeA,UAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\r\n\r\nimport {createSocketConnectionInstance} from './Connection';\r\n\r\n\r\nconst MeetWindow =(props)=>{\r\n   // const ENDPOINT='localhost:5000';\r\n    const [roomId, setRoom] = useState(props.location.pathname.substring(1));\r\n  /*const [userId, setUserId]= useState(null);\r\n    const peer=new Peer();\r\n    const [videoarray,setvideoarray]=useState(null);\r\n    const [localvideo,setlocalvideo]=useState(null);\r\n    const videogrid=document.querySelector('video-grid');\r\n    \r\n   const addstream =(video,stream)=>{\r\n     \r\n     video.srcObject=stream;\r\n    \r\n     video.onloadedmetadata = function(e) {\r\n      video.play();\r\n    };\r\n\r\n    videogrid.append(video);\r\n   \r\n   }\r\n\r\n*/\r\n    useEffect(() => {\r\n       \r\n      socketInstance=(createSocketConnectionInstance({\r\n        roomId:roomId,\r\n      }));/*\r\n      console.log(`connecting to server:${ENDPOINT} `);\r\n      socket = io(ENDPOINT);\r\n      peer.on('open',id =>{\r\n        setUserId(id);\r\n\r\n        navigator.mediaDevices.getUserMedia({video:true})\r\n        .then(function(mediaStream) {\r\n          const video=document.createElement('video');\r\n        addstream(mediaStream);\r\n      })\r\n      .catch(function(err) { console.log(err.name + \": \" + err.message); });\r\n\r\n\r\n        socket.emit('joining-room', roomId, id);\r\n      })\r\n       \r\n\r\n        socket.on('user-joined',(Id)=>{\r\n\r\n         \r\n          \r\n\r\n        \r\n       \r\n          \r\n        });\r\n        console.log('ID:'+userId);\r\n\r\n\r\n\r\n\r\n      \r\n          \r\n\r\n        return () => {\r\n            socket.emit('disconnet');\r\n            socket.off();\r\n        }\r\n        \r\n       */\r\n        \r\n        \r\n    },[socketInstance])\r\n   \r\n    return(<React.Fragment><h1>hello there </h1> <div id=\"video-grid\"></div></React.Fragment>)\r\n};\r\n\r\nexport default MeetWindow;"]},"metadata":{},"sourceType":"module"}