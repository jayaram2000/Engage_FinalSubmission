{"ast":null,"code":"import io from 'socket.io-client';\nimport Peer from 'peerjs';\n\nclass SocketConnection {\n  constructor(props) {\n    this.ENDPOINT = 'localhost:5000';\n    this.peer = new Peer();\n    this.socket = io(this.ENDPOINT);\n    this.peers = {};\n    this.videoContainer = {};\n    this.roomId = props.roomId;\n    this.peer = new Peer();\n    this.socket = io(this.ENDPOINT);\n    console.log('inside the connection da ngotha :' + props.roomId);\n    this.socketEvent();\n    this.PeerEvent();\n  }\n\n  socketEvent() {\n    /* \r\n        */\n  }\n\n  PeerEvent() {\n    this.peer.on('open', id => {\n      this.userId = id;\n      console.log('generated userId: ' + id);\n      this.setlocalstream();\n      console.log(\"emitting joining room request\");\n      setTimeout(() => {\n        this.socket.emit('joining-room', this.roomId, id);\n      }, 1500);\n    });\n  }\n\n  newUserConnection(stream) {\n    this.socket.on('user-joined', Id => {\n      console.log(\"joined use:\" + Id);\n      this.connectToUser(stream, Id);\n    });\n    this.socket.on('user-left', Id => {\n      this.removeuser(Id);\n    });\n  }\n\n  connectToUser(stream, Id) {\n    const call = this.peer.call(Id, stream, {\n      metadata: {\n        userId: this.userId\n      }\n    });\n    this.peer.on('error', err => {\n      console.log(\"ERROR\" + err);\n    });\n    console.log('made call to ' + Id + 'stream');\n    call.on('stream', externalstream => {\n      console.log('connteced user returned stream');\n      this.addstream(externalstream, Id);\n    });\n    call.on('close', () => {\n      this.removeuser(Id);\n    });\n    this.peers[Id] = call;\n  }\n\n  setPeerListenres(stream) {\n    console.log('peerlisteners set');\n    this.peer.on('call', Call => {\n      Call.answer(stream);\n      Call.on('stream', externalstream => {\n        console.log('incoming stream');\n        this.addstream(externalstream, Call.metadata.userId);\n      });\n      Call.on('close', () => {\n        this.removeuser(Call.metadata.userId);\n      });\n    });\n  }\n\n  setlocalstream() {\n    this.getvideoaudio(true, true).then(stream => {\n      this.localstream = stream;\n      this.addstream(stream, this.userId);\n      this.setPeerListenres(stream);\n      this.newUserConnection(stream);\n    }).catch(function (err) {\n      console.log(err.name + \": \" + err.message);\n    });\n  }\n\n  getvideoaudio(videostatus, micstatus) {\n    const myNavigator = navigator.mediaDevices.getUserMedia || navigator.mediaDevices.webkitGetUserMedia || navigator.mediaDevices.mozGetUserMedia || navigator.mediaDevices.msGetUserMedia;\n    return myNavigator({\n      video: videostatus,\n      audio: micstatus\n    });\n  }\n\n  addstream(stream, Id) {\n    if (!this.videoContainer[Id]) {\n      const videogrid = document.getElementById('video-grid');\n      this.videoContainer[Id] = stream;\n      const localcontainer = document.createElement('div');\n      const video = document.createElement('video');\n      video.srcObject = stream;\n      video.id = Id;\n      video.autoplay = true;\n      if (this.userId === Id) video.muted = true;\n      localcontainer.appendChild(video);\n      videogrid.append(localcontainer);\n      console.log(\"done creating video :\" + Id);\n    }\n  }\n\n  removeuser(Id) {\n    if (this.peers[Id]) this.peers[Id].close();\n    delete this.videoContainer[Id];\n    const video = document.getElementById(Id);\n    if (video) video.remove();\n    delete this.peers[Id];\n  }\n\n  videotoggle(videostatus) {\n    this.localstream.getVideoTracks()[0].enabled = !videostatus;\n  }\n\n  mictoggle(micStatus) {\n    this.localstream.getAudioTracks()[0].enabled = !micStatus;\n  }\n\n  exitcall() {\n    this.socket.disconnect();\n\n    if (this.videoContainer[this.userId]) {\n      const Tracks = this.videoContainer[this.userId].getTracks();\n      Tracks.forEach(element => {\n        element.stop();\n      });\n    }\n\n    delete this.videoContainer;\n    delete this.peer;\n    delete this.peers;\n  } //Experimental\n\n\n  screenSharetoggle() {\n    navigator.mediaDevices.getDisplayMedia({\n      video: {\n        cursor: \"always\"\n      },\n      audio: {}\n    });\n  }\n\n  changeMediaView(userID, status) {\n    const userVideoDOM = document.getElementById(userID);\n\n    if (status) {\n      const clientPosition = userVideoDOM.getBoundingClientRect();\n      const createdCanvas = document.createElement(\"SPAN\");\n      createdCanvas.className = userID;\n      createdCanvas.style.position = 'absolute';\n      createdCanvas.style.left = `${clientPosition.left}px`;\n      createdCanvas.style.top = `${clientPosition.top}px`; // createdCanvas.style.width = `${userVideoDOM.videoWidth}px`;\n      // createdCanvas.style.height = `${clientPosition.height}px`;\n\n      createdCanvas.style.width = '100%';\n      createdCanvas.style.height = '100%';\n      createdCanvas.style.backgroundColor = 'green';\n      userVideoDOM.parentElement.appendChild(createdCanvas);\n    } else {\n      const canvasElement = document.getElementsByClassName(userID);\n      if (canvasElement[0]) canvasElement[0].remove();\n    }\n  }\n\n}\n\nexport function createSocketConnectionInstance(settings = {}) {\n  return new SocketConnection(settings);\n}","map":{"version":3,"sources":["E:/Microsoft ENgae/reactFrontend/client-app/src/components/Connection.js"],"names":["io","Peer","SocketConnection","constructor","props","ENDPOINT","peer","socket","peers","videoContainer","roomId","console","log","socketEvent","PeerEvent","on","id","userId","setlocalstream","setTimeout","emit","newUserConnection","stream","Id","connectToUser","removeuser","call","metadata","err","externalstream","addstream","setPeerListenres","Call","answer","getvideoaudio","then","localstream","catch","name","message","videostatus","micstatus","myNavigator","navigator","mediaDevices","getUserMedia","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","video","audio","videogrid","document","getElementById","localcontainer","createElement","srcObject","autoplay","muted","appendChild","append","close","remove","videotoggle","getVideoTracks","enabled","mictoggle","micStatus","getAudioTracks","exitcall","disconnect","Tracks","getTracks","forEach","element","stop","screenSharetoggle","getDisplayMedia","cursor","changeMediaView","userID","status","userVideoDOM","clientPosition","getBoundingClientRect","createdCanvas","className","style","position","left","top","width","height","backgroundColor","parentElement","canvasElement","getElementsByClassName","createSocketConnectionInstance","settings"],"mappings":"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","sourcesContent":["import io from 'socket.io-client';\r\nimport Peer from 'peerjs';\r\n\r\n\r\nclass SocketConnection {\r\n    ENDPOINT='localhost:5000';\r\n    peer= new Peer();\r\n    socket=io(this.ENDPOINT);\r\n    peers={};\r\n    videoContainer={};\r\n    constructor(props)\r\n    {\r\n        this.roomId=props.roomId;\r\n        this.peer=new Peer();\r\n        this.socket=io(this.ENDPOINT);\r\n        console.log('inside the connection da ngotha :'+props.roomId);\r\n        this.socketEvent();\r\n        this.PeerEvent();\r\n        \r\n        \r\n    }\r\n\r\n   \r\n    socketEvent()\r\n    {\r\n        \r\n      /* \r\n\r\n        */\r\n       \r\n    }\r\n    PeerEvent()\r\n    {\r\n       \r\n        this.peer.on('open',(id) =>{\r\n            this.userId=id;\r\n            console.log('generated userId: '+id);\r\n            this.setlocalstream();\r\n            console.log(\"emitting joining room request\")\r\n            setTimeout(()=>{this.socket.emit('joining-room', this.roomId, id)},1500);\r\n           \r\n            \r\n            \r\n       });\r\n       \r\n      \r\n        \r\n    }\r\n\r\n    newUserConnection(stream)\r\n    {\r\n        this.socket.on('user-joined',(Id)=>{\r\n           \r\n            console.log(\"joined use:\"+Id);\r\n          \r\n                this.connectToUser(stream,Id);\r\n            \r\n            \r\n            \r\n           \r\n            \r\n          \r\n        });\r\n        this.socket.on('user-left',(Id)=>{\r\n            this.removeuser(Id);\r\n        })\r\n\r\n    }\r\n    connectToUser(stream,Id)\r\n        {\r\n       \r\n            const call=this.peer.call(Id,stream,{ metadata: { userId: this.userId } });\r\n            this.peer.on('error',(err)=>{\r\n                console.log(\"ERROR\"+err);\r\n            })\r\n            console.log('made call to '+ Id+ 'stream');\r\n            call.on('stream',(externalstream)=>{\r\n                console.log('connteced user returned stream');\r\n                this.addstream(externalstream,Id);\r\n            })\r\n          call.on('close',()=>{\r\n               this.removeuser(Id);\r\n            })\r\n            this.peers[Id]=call;\r\n        }\r\n   \r\n    \r\n    setPeerListenres(stream)\r\n    {\r\n        console.log('peerlisteners set');\r\n        this.peer.on('call', (Call) =>{\r\n            \r\n            Call.answer(stream);\r\n            Call.on('stream',(externalstream)=>{\r\n             console.log('incoming stream');\r\n                \r\n                this.addstream(externalstream,Call.metadata.userId);\r\n            })\r\n            Call.on('close',()=>{\r\n                this.removeuser(Call.metadata.userId);\r\n            })\r\n           \r\n        })\r\n    }\r\n    setlocalstream()\r\n    { \r\n        \r\n       this.getvideoaudio(true,true).then((stream)=> {\r\n         this.localstream=stream;\r\n        this.addstream(stream,this.userId);\r\n        this.setPeerListenres(stream);\r\n        this.newUserConnection(stream);\r\n      })\r\n      .catch(function(err) { console.log(err.name + \": \" + err.message); });\r\n     \r\n    }\r\n    getvideoaudio(videostatus,micstatus)\r\n    {\r\n        const myNavigator = navigator.mediaDevices.getUserMedia || navigator.mediaDevices.webkitGetUserMedia || navigator.mediaDevices.mozGetUserMedia || navigator.mediaDevices.msGetUserMedia;\r\n        return myNavigator({video:videostatus,audio :micstatus});\r\n    }\r\n    \r\n    addstream(stream,Id)\r\n   {\r\n       if(!this.videoContainer[Id])\r\n       {\r\n        const videogrid=document.getElementById('video-grid');\r\n      \r\n        this.videoContainer[Id]=stream;\r\n        const localcontainer = document.createElement('div');\r\n        const video = document.createElement('video');\r\n        video.srcObject =stream;\r\n        video.id=Id;\r\n        video.autoplay = true;\r\n        if (this.userId === Id) video.muted = true;\r\n        localcontainer.appendChild(video)\r\n        videogrid.append(localcontainer);\r\n        console.log(\"done creating video :\"+Id);\r\n       \r\n        \r\n       }\r\n      \r\n   }\r\n\r\n   removeuser(Id)\r\n   {\r\n    if(this.peers[Id])this.peers[Id].close();\r\n    delete this.videoContainer[Id];\r\n    const video = document.getElementById(Id);\r\n    if (video) video.remove();\r\n    delete this.peers[Id];\r\n    \r\n\r\n   }\r\n   \r\n\r\n\r\n   videotoggle(videostatus)\r\n   {\r\n    this.localstream.getVideoTracks()[0].enabled =!videostatus; \r\n   }\r\n\r\n\r\n   mictoggle(micStatus)\r\n   {\r\n    this.localstream.getAudioTracks()[0].enabled =!micStatus;\r\n   }\r\n\r\n\r\n   exitcall()\r\n   {\r\n    this.socket.disconnect();\r\n    if(this.videoContainer[this.userId])\r\n    {\r\n        const Tracks = this.videoContainer[this.userId].getTracks();\r\n        Tracks.forEach(element => {element.stop();\r\n            \r\n        });\r\n    }\r\n   \r\n       delete(this.videoContainer);\r\n       delete(this.peer);\r\n       delete(this.peers);\r\n      \r\n   }\r\n//Experimental\r\n   screenSharetoggle()\r\n   {\r\n       navigator.mediaDevices.getDisplayMedia({\r\n           video: {\r\n               cursor: \"always\"\r\n           },\r\n           audio: {\r\n               \r\n           }\r\n       })\r\n   }\r\n\r\n   changeMediaView(userID, status){\r\n    const userVideoDOM = document.getElementById(userID);\r\n    if (status) {\r\n        const clientPosition = userVideoDOM.getBoundingClientRect();\r\n        const createdCanvas = document.createElement(\"SPAN\");\r\n        createdCanvas.className = userID;\r\n        createdCanvas.style.position = 'absolute';\r\n        createdCanvas.style.left = `${clientPosition.left}px`;\r\n        createdCanvas.style.top = `${clientPosition.top}px`;\r\n        // createdCanvas.style.width = `${userVideoDOM.videoWidth}px`;\r\n        // createdCanvas.style.height = `${clientPosition.height}px`;\r\n        createdCanvas.style.width = '100%';\r\n        createdCanvas.style.height = '100%';\r\n        createdCanvas.style.backgroundColor = 'green';\r\n        userVideoDOM.parentElement.appendChild(createdCanvas);\r\n    } else {\r\n        const canvasElement = document.getElementsByClassName(userID);\r\n        if (canvasElement[0]) canvasElement[0].remove();\r\n    }\r\n}\r\n   \r\n\r\n}\r\n\r\n\r\nexport function createSocketConnectionInstance(settings={}) {\r\n    return  new SocketConnection(settings);\r\n}"]},"metadata":{},"sourceType":"module"}