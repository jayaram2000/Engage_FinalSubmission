{"ast":null,"code":"import io from 'socket.io-client';\nimport Peer from 'peerjs';\n\nclass SocketConnection {\n  // userName=prompt(\"Enter your name\");\n  constructor(props) {\n    this.ENDPOINT = 'localhost:5000';\n    this.peer = new Peer();\n    this.socket = io(this.ENDPOINT);\n    this.peers = {};\n    this.videoContainer = {};\n    this.currentStream = null;\n    this.mediaRecorder = null;\n    this.recordedChunks = [];\n    this.updatevalue = props.updatevalue;\n    this.roomId = props.roomId;\n    this.peer = new Peer();\n    this.socket = io(this.ENDPOINT);\n    console.log('inside the connection da ngotha :' + props.roomId);\n    this.socketEvent();\n    this.PeerEvent();\n    this.screenelement = document.getElementById('screen-share').hidden(true); //document.getElementById('screen-share').outerHTML=\"\";\n  }\n\n  socketEvent() {\n    this.socket.on('screen-share', ID => {\n      this.changeMediaView(ID);\n    });\n    this.socket.on('user-left', Id => {\n      this.removeuser(Id);\n    });\n  }\n\n  PeerEvent() {\n    this.peer.on('open', id => {\n      this.userId = id;\n      console.log('generated userId: ' + id);\n      this.setlocalstream();\n      console.log(\"emitting joining room request\");\n      setTimeout(() => {\n        this.socket.emit('joining-room', this.roomId, id);\n      }, 1500);\n    });\n    this.peer.on('error', err => {\n      console.log('reconnecting to peer', err);\n      this.peer.reconnect();\n    });\n  }\n\n  newUserConnection() {\n    this.socket.on('user-joined', Id => {\n      console.log(\"joined use:\" + Id);\n      this.connectToUser(this.currentStream, Id);\n    });\n  }\n\n  connectToUser(stream, Id) {\n    const call = this.peer.call(Id, stream, {\n      metadata: {\n        userId: this.userId\n      }\n    });\n    this.peer.on('error', err => {\n      console.log(\"ERROR\" + err);\n    });\n    console.log('made call to ' + Id + 'stream');\n    call.on('stream', externalstream => {\n      console.log('connteced user returned stream');\n      this.addstream(externalstream, Id);\n    });\n    /*  call.on('close',()=>{\r\n           this.removeuser(Id);\r\n        })*/\n\n    this.peers[Id] = call.peerConnection;\n  }\n\n  setPeerListenres(stream) {\n    console.log('peerlisteners set');\n    this.peer.on('call', Call => {\n      Call.answer(stream);\n      Call.on('stream', externalstream => {\n        console.log('incoming stream');\n        this.peers[Call.metadata.userId] = Call.peerConnection;\n        this.addstream(externalstream, Call.metadata.userId);\n      });\n      /* Call.on('close',()=>{\r\n           this.removeuser(Call.metadata.userId);\r\n       })\r\n      */\n    });\n  }\n\n  setlocalstream() {\n    this.getvideoaudio(true, true).then(stream => {\n      this.localstream = stream;\n      this.currentStream = stream;\n      this.addstream(stream, this.userId);\n      this.setPeerListenres(this.currentStream);\n      this.newUserConnection();\n    }).catch(function (err) {\n      console.log(err.name + \": \" + err.message);\n    });\n  }\n\n  getvideoaudio(videostatus, micstatus) {\n    const myNavigator = navigator.mediaDevices.getUserMedia || navigator.mediaDevices.webkitGetUserMedia || navigator.mediaDevices.mozGetUserMedia || navigator.mediaDevices.msGetUserMedia;\n    return myNavigator({\n      video: videostatus,\n      audio: micstatus\n    });\n  }\n\n  addstream(stream, Id) {\n    if (!this.videoContainer[Id]) {\n      const videogrid = document.getElementById('video-grid');\n      this.videoContainer[Id] = stream;\n      const localcontainer = document.createElement('div');\n      const video = document.createElement('video');\n      video.srcObject = stream;\n      video.id = Id;\n      video.autoplay = true;\n      if (this.userId === Id) video.muted = true;\n      localcontainer.appendChild(video);\n      videogrid.append(localcontainer);\n      console.log(\"done creating video :\" + Id);\n    }\n  }\n\n  removeuser(Id) {\n    if (this.peers[Id]) this.peers[Id].close();\n    delete this.videoContainer[Id];\n    const video = document.getElementById(Id);\n    if (video) video.remove();\n    delete this.peers[Id];\n  }\n\n  videotoggle(videostatus) {\n    this.localstream.getVideoTracks()[0].enabled = !videostatus;\n  }\n\n  mictoggle(micStatus) {\n    this.localstream.getAudioTracks()[0].enabled = !micStatus;\n  }\n\n  screenSharetoggle() {\n    navigator.mediaDevices.getDisplayMedia({\n      video: {\n        cursor: \"always\"\n      },\n      audio: {\n        echoCancellation: true,\n        noiseSuppression: true\n      }\n    }).then(mediaStream => {\n      mediaStream.getVideoTracks()[0].onended = () => {\n        this.stopscreen();\n      };\n\n      document.getElementById('screen-share').outerHTML = this.screenelement;\n      const tmp = document.getElementById('screen-share');\n      tmp.srcObject = mediaStream;\n\n      for (const [key, value] of Object.entries(this.peers)) {\n        value.getSenders().map(sender => {\n          if (sender.track.kind == \"video\") {\n            if (mediaStream.getVideoTracks().length > 0) {\n              sender.replaceTrack(mediaStream.getVideoTracks()[0]);\n            }\n          }\n        });\n      } ///lifhslibflsdfbsldfb\n      // this.socket.emit()\n\n\n      if (mediaStream) {\n        this.currentStream = mediaStream;\n      }\n\n      var video = document.getElementById(this.userId);\n\n      if (video) {\n        video.pause();\n        video.srcObject = mediaStream;\n        video.play();\n      }\n\n      var video = document.getElementById(this.userId);\n      video.setAttribute('height', '300');\n      video.setAttribute('width', '700');\n    }).catch(err => {\n      console.log(\"unable to get screen stream\" + err);\n    });\n  }\n\n  stopscreen() {\n    var video = document.getElementById(this.userId);\n\n    if (video) {\n      video.pause();\n      video.srcObject = this.localstream;\n      video.play();\n    }\n\n    this.currentStream = this.localstream;\n\n    for (const [key, value] of Object.entries(this.peers)) {\n      value.getSenders().map(sender => {\n        if (sender.track.kind == \"video\") {\n          if (this.localstream.getVideoTracks().length > 0) {\n            sender.replaceTrack(this.localstream.getVideoTracks()[0]);\n          }\n        }\n      });\n    }\n  }\n\n  recordScreen(recordStatus) {\n    if (recordStatus) {\n      navigator.mediaDevices.getDisplayMedia({\n        video: {\n          cursor: \"always\"\n        },\n        audio: {\n          echoCancellation: true,\n          noiseSuppression: true\n        }\n      }).then(mediaStream => {\n        mediaStream.getVideoTracks()[0].onended = () => {\n          this.endrecording();\n        };\n        /*\r\n        var options;\r\n        if (MediaRecorder.isTypeSupported('video/webm;codecs=vp9')) {\r\n        options = {mimeType: 'video/webm; codecs=vp9'};\r\n        } \r\n        else if (MediaRecorder.isTypeSupported('video/webm;codecs=vp8')) {\r\n        options = {mimeType: 'video/webm; codecs=vp8'};\r\n        } \r\n        else if (MediaRecorder.isTypeSupported('video/webm;codecs=h264,opus')) {\r\n            options = {mimeType: 'video/webm;codecs=h264,opus'};\r\n            } \r\n        else\r\n        {\r\n            options = {mimeType: 'video/mp4;codecs=h264,aac'};\r\n        }\r\n        */\n\n\n        this.mediaRecorder = new MediaRecorder(mediaStream); //,options);\n\n        this.startrecording();\n      }).catch(err => {\n        console.log(\"unable to get screen stream for recording\" + err);\n      });\n      /*\r\n      if(this.mediaRecorder)\r\n      {\r\n         \r\n          this.mediaRecorder.ondataavailable=(event)=>{\r\n              console.log(\"ondataavail\",event);\r\n              if (event.data.size > 0) {\r\n                  this.recordedChunks.push(event.data);\r\n          }\r\n          }\r\n      }\r\n      */\n    } else if (this.mediaRecorder) {\n      // this.mediaRecorder.stop();\n      this.endrecording();\n    }\n  }\n\n  startrecording() {\n    this.updatevalue('recordStatus', false);\n    console.log(\"starting\", this.mediaRecorder);\n\n    this.mediaRecorder.onstop = () => {//  this.endrecording();\n    };\n\n    this.mediaRecorder.ondataavailable = event => {\n      console.log(\"ondataavail\", event);\n\n      if (event.data.size > 0) {\n        this.recordedChunks.push(event.data);\n      }\n    };\n\n    this.mediaRecorder.start(1500);\n  }\n\n  endrecording() {\n    if (this.mediaRecorder) {\n      console.log(\"ending\", this.mediaRecorder);\n      this.mediaRecorder.stop();\n      const blob = new Blob(this.recordedChunks, {\n        'type': 'video/mp4'\n      }); // {type: this.recordedChunks[0]});//'video/webm'});\n\n      console.log(this.recordedChunks.length);\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.style.display = 'none';\n      a.href = url;\n      var today = new Date();\n      var date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();\n      var time = today.getHours() + ':' + today.getMinutes() + ':' + today.getSeconds();\n      var dateTime = date + '-' + time;\n      a.download = 'Recording/' + dateTime + '.mp4';\n      document.body.appendChild(a);\n      a.click();\n      /*  setTimeout(() => {\r\n           document.body.removeChild(a);\r\n           window.URL.revokeObjectURL(url);\r\n         }, 100);*/\n\n      this.mediaRecorder = null;\n      this.recordedChunks = [];\n    }\n  }\n\n  exitcall() {\n    this.socket.disconnect();\n\n    if (this.videoContainer[this.userId]) {\n      const Tracks = this.videoContainer[this.userId].getTracks();\n      Tracks.forEach(element => {\n        element.stop();\n      });\n    }\n\n    delete this.videoContainer;\n    delete this.peer;\n    delete this.peers;\n  } //experimental\n\n\n  changeMediaView(userID, status) {\n    const userVideoDOM = document.getElementById(userID);\n\n    if (status) {\n      const clientPosition = userVideoDOM.getBoundingClientRect();\n      const createdCanvas = document.createElement(\"SPAN\");\n      createdCanvas.className = userID;\n      createdCanvas.style.position = 'absolute';\n      createdCanvas.style.left = `${clientPosition.left}px`;\n      createdCanvas.style.top = `${clientPosition.top}px`;\n      createdCanvas.style.width = `${userVideoDOM.videoWidth}px`;\n      createdCanvas.style.height = `${clientPosition.height}px`;\n      createdCanvas.style.width = '100%';\n      createdCanvas.style.height = '100%';\n      createdCanvas.style.backgroundColor = 'green';\n      userVideoDOM.parentElement.appendChild(createdCanvas);\n    } else {\n      const canvasElement = document.getElementsByClassName(userID);\n      if (canvasElement[0]) canvasElement[0].remove();\n    }\n  }\n\n}\n\nexport function createSocketConnectionInstance(settings = {}) {\n  return new SocketConnection(settings);\n}","map":{"version":3,"sources":["E:/Microsoft ENgae/reactFrontend/client-app/src/components/Connection.js"],"names":["io","Peer","SocketConnection","constructor","props","ENDPOINT","peer","socket","peers","videoContainer","currentStream","mediaRecorder","recordedChunks","updatevalue","roomId","console","log","socketEvent","PeerEvent","screenelement","document","getElementById","hidden","on","ID","changeMediaView","Id","removeuser","id","userId","setlocalstream","setTimeout","emit","err","reconnect","newUserConnection","connectToUser","stream","call","metadata","externalstream","addstream","peerConnection","setPeerListenres","Call","answer","getvideoaudio","then","localstream","catch","name","message","videostatus","micstatus","myNavigator","navigator","mediaDevices","getUserMedia","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","video","audio","videogrid","localcontainer","createElement","srcObject","autoplay","muted","appendChild","append","close","remove","videotoggle","getVideoTracks","enabled","mictoggle","micStatus","getAudioTracks","screenSharetoggle","getDisplayMedia","cursor","echoCancellation","noiseSuppression","mediaStream","onended","stopscreen","outerHTML","tmp","key","value","Object","entries","getSenders","map","sender","track","kind","length","replaceTrack","pause","play","setAttribute","recordScreen","recordStatus","endrecording","MediaRecorder","startrecording","onstop","ondataavailable","event","data","size","push","start","stop","blob","Blob","url","URL","createObjectURL","a","style","display","href","today","Date","date","getFullYear","getMonth","getDate","time","getHours","getMinutes","getSeconds","dateTime","download","body","click","exitcall","disconnect","Tracks","getTracks","forEach","element","userID","status","userVideoDOM","clientPosition","getBoundingClientRect","createdCanvas","className","position","left","top","width","videoWidth","height","backgroundColor","parentElement","canvasElement","getElementsByClassName","createSocketConnectionInstance","settings"],"mappings":"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","sourcesContent":["import io from 'socket.io-client';\r\nimport Peer from 'peerjs';\r\n\r\n\r\nclass SocketConnection {\r\n    ENDPOINT='localhost:5000';\r\n    peer= new Peer();\r\n    socket=io(this.ENDPOINT);\r\n    peers={};\r\n   // userName=prompt(\"Enter your name\");\r\n    videoContainer={};\r\n    currentStream=null;\r\n    mediaRecorder=null;\r\n    recordedChunks=[];\r\n    constructor(props)\r\n    {   this.updatevalue=props.updatevalue;\r\n        this.roomId=props.roomId;\r\n        this.peer=new Peer();\r\n        this.socket=io(this.ENDPOINT);\r\n        console.log('inside the connection da ngotha :'+props.roomId);\r\n        this.socketEvent();\r\n        this.PeerEvent();\r\n        this.screenelement=document.getElementById('screen-share').hidden(true);\r\n        //document.getElementById('screen-share').outerHTML=\"\";\r\n        \r\n    }\r\n\r\n    socketEvent()\r\n    {\r\n        this.socket.on('screen-share',(ID)=>{\r\n            this.changeMediaView(ID);\r\n        })\r\n        \r\n        this.socket.on('user-left',(Id)=>{\r\n            this.removeuser(Id);\r\n        })\r\n    }\r\n\r\n    PeerEvent()\r\n    {\r\n       \r\n        this.peer.on('open',(id) =>{\r\n            this.userId=id;\r\n            console.log('generated userId: '+id);\r\n            this.setlocalstream();\r\n            console.log(\"emitting joining room request\")\r\n            setTimeout(()=>{this.socket.emit('joining-room', this.roomId, id)},1500);\r\n           \r\n            \r\n            \r\n       });\r\n       this.peer.on('error',(err)=>{\r\n           console.log('reconnecting to peer',err);\r\n           this.peer.reconnect();\r\n       })\r\n      \r\n        \r\n    }\r\n\r\n    newUserConnection()\r\n    {\r\n        this.socket.on('user-joined',(Id)=>{\r\n           \r\n            console.log(\"joined use:\"+Id);\r\n          \r\n                this.connectToUser(this.currentStream,Id);\r\n            \r\n            \r\n            \r\n           \r\n            \r\n          \r\n        });\r\n      \r\n\r\n    }\r\n    connectToUser(stream,Id)\r\n        {\r\n       \r\n            const call=this.peer.call(Id,stream,{ metadata: { userId: this.userId } });\r\n            this.peer.on('error',(err)=>{\r\n                console.log(\"ERROR\"+err);\r\n            })\r\n            console.log('made call to '+ Id+ 'stream');\r\n            call.on('stream',(externalstream)=>{\r\n                console.log('connteced user returned stream');\r\n                this.addstream(externalstream,Id);\r\n            })\r\n        /*  call.on('close',()=>{\r\n               this.removeuser(Id);\r\n            })*/\r\n            this.peers[Id]=call.peerConnection;\r\n          \r\n        }\r\n   \r\n    \r\n    setPeerListenres(stream)\r\n    {\r\n        console.log('peerlisteners set');\r\n        this.peer.on('call', (Call) =>{\r\n           \r\n            Call.answer(stream);\r\n            Call.on('stream',(externalstream)=>{\r\n             console.log('incoming stream');\r\n             this.peers[Call.metadata.userId]=Call.peerConnection;\r\n                this.addstream(externalstream,Call.metadata.userId);\r\n            })\r\n           /* Call.on('close',()=>{\r\n                this.removeuser(Call.metadata.userId);\r\n            })\r\n           */\r\n        })\r\n    }\r\n    setlocalstream()\r\n    { \r\n        \r\n       this.getvideoaudio(true,true).then((stream)=> {\r\n         this.localstream=stream;\r\n         this.currentStream=stream;\r\n        this.addstream(stream,this.userId);\r\n        this.setPeerListenres(this.currentStream);\r\n        this.newUserConnection();\r\n      })\r\n      .catch(function(err) { console.log(err.name + \": \" + err.message); });\r\n     \r\n    }\r\n    getvideoaudio(videostatus,micstatus)\r\n    {\r\n        const myNavigator = navigator.mediaDevices.getUserMedia || navigator.mediaDevices.webkitGetUserMedia || navigator.mediaDevices.mozGetUserMedia || navigator.mediaDevices.msGetUserMedia;\r\n        return myNavigator({video:videostatus,audio :micstatus});\r\n    }\r\n    \r\n    \r\n    addstream(stream,Id)\r\n   {\r\n       if(!this.videoContainer[Id])\r\n       {\r\n        const videogrid=document.getElementById('video-grid');\r\n      \r\n        this.videoContainer[Id]=stream;\r\n        const localcontainer = document.createElement('div');\r\n        const video = document.createElement('video');\r\n        video.srcObject =stream;\r\n        video.id=Id;\r\n        video.autoplay = true;\r\n        if (this.userId === Id) video.muted = true;\r\n        localcontainer.appendChild(video)\r\n        videogrid.append(localcontainer);\r\n        console.log(\"done creating video :\"+Id);\r\n       \r\n        \r\n       }\r\n      \r\n   }\r\n\r\n   removeuser(Id)\r\n   {\r\n    if(this.peers[Id])this.peers[Id].close();\r\n    delete this.videoContainer[Id];\r\n    const video = document.getElementById(Id);\r\n    if (video) video.remove();\r\n    delete this.peers[Id];\r\n    \r\n\r\n   }\r\n   \r\n\r\n\r\n   videotoggle(videostatus)\r\n   {\r\n    this.localstream.getVideoTracks()[0].enabled =!videostatus; \r\n   }\r\n\r\n\r\n   mictoggle(micStatus)\r\n   {\r\n    this.localstream.getAudioTracks()[0].enabled =!micStatus;\r\n   }\r\n\r\n\r\n\r\n   screenSharetoggle()\r\n   {\r\n    \r\n   \r\n    \r\n       navigator.mediaDevices.getDisplayMedia({\r\n           video: {\r\n               cursor: \"always\"\r\n           },\r\n           audio: {\r\n               echoCancellation: true,\r\n               noiseSuppression: true\r\n\r\n           }\r\n       }).then((mediaStream)=>{\r\n           mediaStream.getVideoTracks()[0].onended=()=>\r\n           {\r\n             \r\n           this.stopscreen();\r\n           }\r\n        document.getElementById('screen-share').outerHTML=this.screenelement;\r\n        const tmp=document.getElementById('screen-share');\r\n        tmp.srcObject=mediaStream;\r\n        for (const [key, value] of Object.entries(this.peers)) {\r\n           \r\n            value.getSenders().map((sender) => {\r\n               \r\n                if(sender.track.kind == \"video\") {\r\n                    if(mediaStream.getVideoTracks().length > 0){\r\n                        sender.replaceTrack(mediaStream.getVideoTracks()[0]);\r\n                    }\r\n                }\r\n            });\r\n          }\r\n          ///lifhslibflsdfbsldfb\r\n         // this.socket.emit()\r\n          if(mediaStream)\r\n          {\r\n            this.currentStream=mediaStream;\r\n          }\r\n         \r\n          var video = document.getElementById(this.userId);\r\n          if(video)\r\n          {\r\n            video.pause();\r\n            video.srcObject = mediaStream;\r\n            video.play();\r\n          }\r\n          var video = document.getElementById(this.userId);\r\n          video.setAttribute('height', '300');\r\n          video.setAttribute('width', '700');\r\n\r\n        }).catch((err)=>{\r\n            console.log(\"unable to get screen stream\"+err)\r\n        })\r\n\r\n           \r\n   }\r\n   \r\n \r\n    stopscreen()\r\n    {\r\n       \r\n        var video = document.getElementById(this.userId);\r\n        if(video)\r\n        {\r\n            video.pause();\r\n            video.srcObject = this.localstream;\r\n            video.play();\r\n        }\r\n         \r\n          this.currentStream=this.localstream\r\n        for (const [key, value] of Object.entries(this.peers)) {\r\n            \r\n            value.getSenders().map((sender) => {\r\n            \r\n                if(sender.track.kind == \"video\") {\r\n                    if(this.localstream.getVideoTracks().length > 0){\r\n                        sender.replaceTrack(this.localstream.getVideoTracks()[0]);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    recordScreen(recordStatus){\r\n\r\n        if(recordStatus)\r\n        {\r\n            navigator.mediaDevices.getDisplayMedia({\r\n                video: {\r\n                    cursor: \"always\"\r\n                },\r\n                audio: {\r\n                    echoCancellation: true,\r\n                    noiseSuppression: true\r\n     \r\n                }\r\n            }).then((mediaStream)=>{\r\n                mediaStream.getVideoTracks()[0].onended=()=>\r\n                {\r\n                  \r\n                this.endrecording();\r\n                }\r\n                /*\r\n                var options;\r\n                if (MediaRecorder.isTypeSupported('video/webm;codecs=vp9')) {\r\n                options = {mimeType: 'video/webm; codecs=vp9'};\r\n                } \r\n                else if (MediaRecorder.isTypeSupported('video/webm;codecs=vp8')) {\r\n                options = {mimeType: 'video/webm; codecs=vp8'};\r\n                } \r\n                else if (MediaRecorder.isTypeSupported('video/webm;codecs=h264,opus')) {\r\n                    options = {mimeType: 'video/webm;codecs=h264,opus'};\r\n                    } \r\n                else\r\n                {\r\n                    options = {mimeType: 'video/mp4;codecs=h264,aac'};\r\n                }\r\n               */\r\n                this.mediaRecorder=new MediaRecorder(mediaStream);//,options);\r\n               this.startrecording();\r\n               \r\n            \r\n            }).catch((err)=>{\r\n                console.log(\"unable to get screen stream for recording\"+err)\r\n            })\r\n            /*\r\n            if(this.mediaRecorder)\r\n            {\r\n               \r\n                this.mediaRecorder.ondataavailable=(event)=>{\r\n                    console.log(\"ondataavail\",event);\r\n                    if (event.data.size > 0) {\r\n                        this.recordedChunks.push(event.data);\r\n                }\r\n                }\r\n            }\r\n           */\r\n        }\r\n        else if(this.mediaRecorder)\r\n        {\r\n           // this.mediaRecorder.stop();\r\n            this.endrecording();\r\n           \r\n        }\r\n        \r\n    }\r\n\r\n    startrecording()\r\n    {   \r\n        this.updatevalue('recordStatus',false);\r\n       \r\n        console.log(\"starting\",this.mediaRecorder);\r\n       this.mediaRecorder.onstop=()=>{\r\n         //  this.endrecording();\r\n       }\r\n       this.mediaRecorder.ondataavailable=(event)=>{\r\n        console.log(\"ondataavail\",event);\r\n        if (event.data.size > 0) {\r\n            this.recordedChunks.push(event.data);\r\n                }\r\n            }   \r\n    this.mediaRecorder.start(1500);\r\n    }\r\n    \r\n    endrecording()\r\n    {\r\n        if(this.mediaRecorder)\r\n        {\r\n            console.log(\"ending\",this.mediaRecorder);\r\n            this.mediaRecorder.stop();\r\n            const blob = new Blob(this.recordedChunks,{'type': 'video/mp4'});// {type: this.recordedChunks[0]});//'video/webm'});\r\n            console.log(this.recordedChunks.length);\r\n            const url = URL.createObjectURL(blob);\r\n            const a = document.createElement('a');\r\n            a.style.display = 'none';\r\n            a.href = url;\r\n            var today = new Date();\r\n            var date = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();\r\n            var time = today.getHours() + ':' + today.getMinutes() + ':' + today.getSeconds();\r\n            var dateTime = date+'-'+time;\r\n            a.download = 'Recording/'+dateTime+'.mp4';\r\n            document.body.appendChild(a);\r\n            a.click();\r\n         /*  setTimeout(() => {\r\n              document.body.removeChild(a);\r\n              window.URL.revokeObjectURL(url);\r\n            }, 100);*/\r\n              this.mediaRecorder=null;\r\n              this.recordedChunks=[];\r\n        }\r\n       \r\n    }\r\n    exitcall()\r\n    {\r\n     this.socket.disconnect();\r\n     if(this.videoContainer[this.userId])\r\n     {\r\n         const Tracks = this.videoContainer[this.userId].getTracks();\r\n         Tracks.forEach(element => {element.stop();\r\n             \r\n         });\r\n     }\r\n    \r\n        delete(this.videoContainer);\r\n        delete(this.peer);\r\n        delete(this.peers);\r\n       \r\n    }\r\n \r\n\r\n\r\n \r\n//experimental\r\n   changeMediaView(userID, status){\r\n    const userVideoDOM = document.getElementById(userID);\r\n    if (status) {\r\n        const clientPosition = userVideoDOM.getBoundingClientRect();\r\n        const createdCanvas = document.createElement(\"SPAN\");\r\n        createdCanvas.className = userID;\r\n        createdCanvas.style.position = 'absolute';\r\n        createdCanvas.style.left = `${clientPosition.left}px`;\r\n        createdCanvas.style.top = `${clientPosition.top}px`;\r\n        createdCanvas.style.width = `${userVideoDOM.videoWidth}px`;\r\n        createdCanvas.style.height = `${clientPosition.height}px`;\r\n        createdCanvas.style.width = '100%';\r\n        createdCanvas.style.height = '100%';\r\n        createdCanvas.style.backgroundColor = 'green';\r\n        userVideoDOM.parentElement.appendChild(createdCanvas);\r\n    } else {\r\n        const canvasElement = document.getElementsByClassName(userID);\r\n        if (canvasElement[0]) canvasElement[0].remove();\r\n    }\r\n}\r\n   \r\n\r\n}\r\n\r\n\r\nexport function createSocketConnectionInstance(settings={}) {\r\n    return  new SocketConnection(settings);\r\n}"]},"metadata":{},"sourceType":"module"}