{"ast":null,"code":"import io from 'socket.io-client';\nimport Peer from 'peerjs';\n\nclass SocketConnection {\n  constructor(props) {\n    this.ENDPOINT = 'localhost:5000';\n    this.peer = new Peer();\n    this.socket = null;\n    this.roomId = props.roomId;\n    this.peer = new Peer();\n    this.socket = io(this.ENDPOINT);\n    console.log('inside the connection da ngotha :' + props.roomId);\n    this.socketEvent();\n    this.PeerEvent();\n  }\n\n  socketEvent() {\n    this.socket = io(this.ENDPOINT);\n    this.socket.on('user-joined', Id => {});\n  }\n\n  PeerEvent() {\n    this.peer.on('open', id => {\n      this.socket.emit('joining-room', this.roomId, id);\n      console.log('generated userId: ' + id);\n      this.userId = id;\n    });\n    this.setlocalstream();\n  }\n\n  setlocalstream() {\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(function (stream) {\n      this.printer(); //  this.addstream(stream);\n    }).catch(function (err) {\n      console.log(err.name + \": \" + err.message);\n    });\n  }\n\n  printer() {\n    console.log('tesgt');\n  }\n\n  addstream(stream) {\n    /*\r\n       const videogrid=document.getElementById('video-grid');\r\n      \r\n       const videoContainer = document.createElement('div');\r\n       const video = document.createElement('video');\r\n       video.srcObject =stream;// this.videoContainer[createObj.id].stream;\r\n       \r\n       video.autoplay = true;\r\n     //  if (this.userId === Id) video.muted = true;\r\n       videoContainer.appendChild(video)\r\n       videogrid.append(videoContainer);\r\n       console.log(\"done creating video\");\r\n       */\n  }\n\n}\n\nexport function createSocketConnectionInstance(settings = {}) {\n  return new SocketConnection(settings);\n}","map":{"version":3,"sources":["E:/Microsoft ENgae/reactFrontend/client-app/src/components/Connection.js"],"names":["io","Peer","SocketConnection","constructor","props","ENDPOINT","peer","socket","roomId","console","log","socketEvent","PeerEvent","on","Id","id","emit","userId","setlocalstream","navigator","mediaDevices","getUserMedia","video","audio","then","stream","printer","catch","err","name","message","addstream","createSocketConnectionInstance","settings"],"mappings":"AAAA,OAAOA,EAAP,MAAe,kBAAf;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AAGA,MAAMC,gBAAN,CAAuB;AAKnBC,EAAAA,WAAW,CAACC,KAAD,EACX;AAAA,SALAC,QAKA,GALS,gBAKT;AAAA,SAJAC,IAIA,GAJM,IAAIL,IAAJ,EAIN;AAAA,SAHAM,MAGA,GAHO,IAGP;AACI,SAAKC,MAAL,GAAYJ,KAAK,CAACI,MAAlB;AACA,SAAKF,IAAL,GAAU,IAAIL,IAAJ,EAAV;AACA,SAAKM,MAAL,GAAYP,EAAE,CAAC,KAAKK,QAAN,CAAd;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAY,sCAAoCN,KAAK,CAACI,MAAtD;AACA,SAAKG,WAAL;AACA,SAAKC,SAAL;AAEH;;AAGDD,EAAAA,WAAW,GACX;AACI,SAAKJ,MAAL,GAAYP,EAAE,CAAC,KAAKK,QAAN,CAAd;AACA,SAAKE,MAAL,CAAYM,EAAZ,CAAe,aAAf,EAA8BC,EAAD,IAAM,CAQlC,CARD;AAUH;;AAEDF,EAAAA,SAAS,GACT;AACI,SAAKN,IAAL,CAAUO,EAAV,CAAa,MAAb,EAAqBE,EAAD,IAAO;AACvB,WAAKR,MAAL,CAAYS,IAAZ,CAAiB,cAAjB,EAAiC,KAAKR,MAAtC,EAA8CO,EAA9C;AACAN,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAqBK,EAAjC;AACJ,WAAKE,MAAL,GAAYF,EAAZ;AAAgB,KAHhB;AAII,SAAKG,cAAL;AACP;;AAEDA,EAAAA,cAAc,GACd;AACIC,IAAAA,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoC;AAACC,MAAAA,KAAK,EAAC,IAAP;AAAaC,MAAAA,KAAK,EAAC;AAAnB,KAApC,EACCC,IADD,CACM,UAASC,MAAT,EAAiB;AACrB,WAAKC,OAAL,GADqB,CAEzB;AACC,KAJC,EAKDC,KALC,CAKK,UAASC,GAAT,EAAc;AAAEnB,MAAAA,OAAO,CAACC,GAAR,CAAYkB,GAAG,CAACC,IAAJ,GAAW,IAAX,GAAkBD,GAAG,CAACE,OAAlC;AAA6C,KALlE;AAMH;;AACDJ,EAAAA,OAAO,GACP;AACIjB,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACH;;AACDqB,EAAAA,SAAS,CAACN,MAAD,EACV;AAAC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI;;AApEmB;;AA0EvB,OAAO,SAASO,8BAAT,CAAwCC,QAAQ,GAAC,EAAjD,EAAqD;AACxD,SAAQ,IAAI/B,gBAAJ,CAAqB+B,QAArB,CAAR;AACH","sourcesContent":["import io from 'socket.io-client';\r\nimport Peer from 'peerjs';\r\n\r\n\r\nclass SocketConnection {\r\n    ENDPOINT='localhost:5000';\r\n    peer= new Peer();\r\n    socket=null\r\n  \r\n    constructor(props)\r\n    {\r\n        this.roomId=props.roomId;\r\n        this.peer=new Peer();\r\n        this.socket=io(this.ENDPOINT);\r\n        console.log('inside the connection da ngotha :'+props.roomId);\r\n        this.socketEvent();\r\n        this.PeerEvent();\r\n        \r\n    }\r\n\r\n   \r\n    socketEvent()\r\n    {\r\n        this.socket=io(this.ENDPOINT);\r\n        this.socket.on('user-joined',(Id)=>{\r\n\r\n         \r\n          \r\n\r\n        \r\n       \r\n          \r\n        });\r\n\r\n    }\r\n   \r\n    PeerEvent()\r\n    {\r\n        this.peer.on('open',(id) =>{\r\n            this.socket.emit('joining-room', this.roomId, id);\r\n            console.log('generated userId: '+id);\r\n        this.userId=id;});\r\n            this.setlocalstream();\r\n    }\r\n    \r\n    setlocalstream()\r\n    {\r\n        navigator.mediaDevices.getUserMedia({video:true, audio:true})\r\n        .then(function(stream) {\r\n          this.printer();\r\n      //  this.addstream(stream);\r\n      })\r\n      .catch(function(err) { console.log(err.name + \": \" + err.message); });\r\n    }\r\n    printer()\r\n    {\r\n        console.log('tesgt');\r\n    }\r\n    addstream(stream)\r\n   {/*\r\n       const videogrid=document.getElementById('video-grid');\r\n      \r\n       const videoContainer = document.createElement('div');\r\n       const video = document.createElement('video');\r\n       video.srcObject =stream;// this.videoContainer[createObj.id].stream;\r\n       \r\n       video.autoplay = true;\r\n     //  if (this.userId === Id) video.muted = true;\r\n       videoContainer.appendChild(video)\r\n       videogrid.append(videoContainer);\r\n       console.log(\"done creating video\");\r\n       */\r\n   }\r\n   \r\n\r\n}\r\n\r\n\r\nexport function createSocketConnectionInstance(settings={}) {\r\n    return  new SocketConnection(settings);\r\n}"]},"metadata":{},"sourceType":"module"}