[{"E:\\Microsoft ENgae\\reactFrontend\\client-app\\src\\index.js":"1","E:\\Microsoft ENgae\\reactFrontend\\client-app\\src\\App.js":"2","E:\\Microsoft ENgae\\reactFrontend\\client-app\\src\\components\\meetWindow.jsx":"3","E:\\Microsoft ENgae\\reactFrontend\\client-app\\src\\components\\landingPage.jsx":"4","E:\\Microsoft ENgae\\reactFrontend\\client-app\\src\\components\\MeetWindow.jsx":"5","E:\\Microsoft ENgae\\reactFrontend\\client-app\\src\\components\\LandingPage.jsx":"6","E:\\Microsoft ENgae\\reactFrontend\\client-app\\src\\components\\popup.jsx":"7","E:\\Microsoft ENgae\\reactFrontend\\client-app\\src\\connectionServices\\Connection.js":"8"},{"size":176,"mtime":1624285049491,"results":"9","hashOfConfig":"10"},{"size":399,"mtime":1624443728078,"results":"11","hashOfConfig":"10"},{"size":302,"mtime":1624298815840,"results":"12","hashOfConfig":"10"},{"size":768,"mtime":1624381768591,"results":"13","hashOfConfig":"10"},{"size":8439,"mtime":1626123374723,"results":"14","hashOfConfig":"10"},{"size":3357,"mtime":1626177345812,"results":"15","hashOfConfig":"10"},{"size":2041,"mtime":1626115983582,"results":"16","hashOfConfig":"10"},{"size":17943,"mtime":1626175622023,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"15pdfjt",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":1,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":1,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"20"},"E:\\Microsoft ENgae\\reactFrontend\\client-app\\src\\index.js",[],["37","38"],"E:\\Microsoft ENgae\\reactFrontend\\client-app\\src\\App.js",[],"E:\\Microsoft ENgae\\reactFrontend\\client-app\\src\\components\\meetWindow.jsx",["39","40","41","42"],"E:\\Microsoft ENgae\\reactFrontend\\client-app\\src\\components\\landingPage.jsx",["43","44","45"],"E:\\Microsoft ENgae\\reactFrontend\\client-app\\src\\components\\MeetWindow.jsx",["46"],"import React, {useState, useEffect} from 'react';\r\nimport {createSocketConnectionInstance} from '../connectionServices/Connection';\r\nimport { AppBar, Toolbar } from '@material-ui/core';\r\nimport MicIcon from '@material-ui/icons/Mic';\r\nimport MicOffIcon from '@material-ui/icons/MicOff';\r\nimport VideocamIcon from '@material-ui/icons/Videocam';\r\nimport VideocamOffIcon from '@material-ui/icons/VideocamOff';\r\nimport CallEndRoundedIcon from '@material-ui/icons/CallEndRounded';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport '../styles/MeetWindow.css';\r\nimport { Widget,isWidgetOpened,addLinkSnippet, renderCustomComponent, deleteMessages, setBadgeCount} from 'react-chat-widget';\r\nimport 'react-chat-widget/lib/styles.css';\r\nimport UserPopup from './popup';\r\n\r\n\r\nlet socketInstance;\r\nlet msgCount;\r\n\r\n\r\nconst MeetWindow =(props)=>{\r\n  \r\n    const roomId = (props.location.pathname.substring(1));\r\n    \r\n    const [micStatus,setMic]=useState(true);\r\n    const [videoStatus,setCam] =useState(true);\r\n    const [recordStatus,setRecord]=useState(true);\r\n    const [screenShareStatus,setScreen]=useState(true);\r\n    const [screenPresenterStatus,setpresenter]=useState(false);\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n    const open = Boolean(anchorEl);\r\n    const [userName,setName]=useState('');\r\n\r\n    useEffect(() => {\r\n       \r\n      socketInstance=(createSocketConnectionInstance({\r\n        roomId:roomId,\r\n        micStatus:micStatus,\r\n        videoStatus:videoStatus,\r\n        recordStatus:recordStatus,\r\n        updatevalue: updatevalue,\r\n      }))\r\n\r\n      toast.configure();\r\n      deleteMessages();\r\n\r\n\r\n      addLinkSnippet({ title: 'Share this link to join the room',\r\n      link: `https://engagevideo.netlify.app/${roomId}`,\r\n      target: ''});\r\n\r\n\r\n      msgCount=0;\r\n    },[])\r\n\r\n    const updatevalue=(property,val)=>{\r\n      if(property==='recordStatus')\r\n      {\r\n        setRecord(val);\r\n      }\r\n      else if(property==='micStatus')\r\n      {\r\n        setMic(val);\r\n      }\r\n      else if(property==='videoStatus')\r\n      {\r\n        setCam(val);\r\n      }\r\n      else if(property==='screenPresenter')\r\n      {\r\n        setpresenter(val);\r\n        setCam(!val);\r\n        socketInstance.videotoggle(val);\r\n        \r\n      }\r\n      else if(property==='screenShareStatus')\r\n      {\r\n        setScreen(val);\r\n       \r\n      }\r\n      else if(property==='Incomingmessage')\r\n      {\r\n        updateNewMessage(val);\r\n        \r\n      }\r\n      else if(property==='newuserName')\r\n      {\r\n        newuserjoined(val);\r\n      }\r\n   \r\n\r\n    }\r\n\r\n    const exitcall=()=>{\r\n\r\n      socketInstance.exitcall(userName);\r\n      props.history.push('/');\r\n    }\r\n\r\n\r\n\r\n    const mictoggle=()=>{\r\n\r\n      socketInstance.mictoggle(micStatus)\r\n    }\r\n\r\n\r\n    const videotoggle=()=>{\r\n      if(screenPresenterStatus)\r\n      return;\r\n\r\n      socketInstance.videotoggle(videoStatus);\r\n\r\n    }\r\n   \r\n\r\n    const screenShare=()=>{\r\n\r\n      socketInstance.screenSharetoggle(screenShareStatus); \r\n    }\r\n\r\n    const recordScreen=()=>{\r\n\r\n      socketInstance.recordScreen(recordStatus);\r\n\r\n    }\r\n\r\n    const copyToClipboard=() => {\r\n\r\n      var textField = document.createElement('textarea')\r\n      textField.innerText = roomId;\r\n      document.body.appendChild(textField)\r\n      textField.select()\r\n      document.execCommand('copy')\r\n      textField.remove()\r\n    }\r\n\r\n    const copyLink=()=>{\r\n    \r\n     copyToClipboard();\r\n\r\n      toast.info(`Room code copied to clipboard !`,{position: toast.POSITION.TOP_CENTER});\r\n    }\r\n    \r\n    \r\n\r\n    const handleClick = (event) => {\r\n\r\n      setAnchorEl(event.currentTarget);\r\n    };\r\n  \r\n    const handleClose = () => {\r\n\r\n      setAnchorEl(null);\r\n    };\r\n  \r\n    const handleNewUserMessage=(Message)=>{\r\n    \r\n      socketInstance.broadcastmessage(Message,userName);\r\n      \r\n    }\r\n    const updateNewMessage=(updateNewMessage)=>{   \r\n\r\n    renderCustomComponent(Reply,updateNewMessage); \r\n    msgCount++;\r\n    console.log(`msg count: ${msgCount}`);\r\n    setBadgeCount(msgCount);\r\n\r\n    \r\n    }\r\n\r\n    const newuserjoined=(userName)=>{\r\n\r\n      renderCustomComponent(newUser,userName);\r\n   \r\n    }\r\n  \r\n    const newUser=(props)=>{\r\n\r\n      return(<React.Fragment> <div class=\"chat-messages\">\r\n                                 <div class=\"new-user\">{props.userName} {props.messageBody}</div>\r\n                             </div>\r\n            </React.Fragment>\r\n\r\n     )\r\n\r\n    }\r\n   const Reply=(props)=>{\r\n     return(<React.Fragment> <div class=\"chat-messages\">\r\n                                  <div class=\"message\">{props.messageBody}</div>\r\n                                   <div class=\"from\">{props.userName} {new Date().toLocaleTimeString()}</div>\r\n                              </div>\r\n             </React.Fragment>\r\n            )\r\n  \r\n   }\r\n\r\n\r\n \r\n\r\n\r\n   const handleuserDetails=(val)=>{\r\n\r\n    setName(val.name);\r\n    console.log('username',val.name);\r\n    socketInstance.newuserChat(val.name);\r\n\r\n   }\r\n\r\n    return(<React.Fragment>\r\n                        <div onClick={()=>{if(isWidgetOpened()){ msgCount=0;}}}>\r\n\r\n                        <Widget handleNewUserMessage={handleNewUserMessage}  \r\n                            title=\"Chat here !\"\r\n                            subtitle=\"\" \r\n                            autofocus={false}\r\n                            showTimeStamp={false}\r\n                            setBadgeCount={msgCount}/>\r\n\r\n                        </div>\r\n\r\n                        <UserPopup submitHandle={handleuserDetails}></UserPopup>\r\n    \r\n                         <div id=\"video-grid\"> <video id=\"screen-share\" display=\"none\"/> </div>\r\n   \r\n                        <AppBar className=\"footbar-wrapper\" position=\"bottom-fixed\" color=\"primary\" >\r\n                            <Toolbar className={`footbar-tool`}>\r\n                                  <div  onClick={mictoggle} title={micStatus ? 'Disable Mic' : 'Enable Mic'}>\r\n                                          {micStatus ?<MicIcon/>:<MicOffIcon/>}\r\n                                  </div>\r\n                                  <div  onClick={exitcall} >\r\n                                          <CallEndRoundedIcon/>\r\n                                  </div>\r\n                                \r\n                                <div  onClick={videotoggle} title={micStatus ? 'Disable Cam' : 'Enable Cam'}>\r\n                                          {videoStatus ?<VideocamIcon/>:<VideocamOffIcon/>}\r\n                                  </div>  \r\n                                  <div onClick={copyLink} title='Add user'>\r\n                                  {<PersonAddIcon/>}\r\n                                  </div>\r\n                                  <IconButton\r\n                                      id=\"options-button\"\r\n                                      aria-label=\"more\"\r\n                                      aria-controls=\"long-menu\"\r\n                                      aria-haspopup=\"true\"\r\n                                      onClick={handleClick}>\r\n                                        <MoreVertIcon />\r\n                                  </IconButton>\r\n                                  <Menu\r\n                                    id=\"more\"\r\n                                    anchorEl={anchorEl}\r\n                                    keepMounted\r\n                                    open={open}\r\n                                    onClose={handleClose}\r\n                                    TransitionComponent={Fade}>\r\n                                    <MenuItem onClick={screenShare}>{(!screenPresenterStatus && !screenShareStatus)?\"Disabled\":(screenShareStatus)?\"Share Screen\":\"End ScreenShare\"}</MenuItem>\r\n                                     <MenuItem onClick={recordScreen}>{(recordStatus)?\"Start Recording\":\"Stop Recording\"}</MenuItem>\r\n                        \r\n                                  </Menu>\r\n                          </Toolbar>\r\n                        </AppBar>\r\n       \r\n        \r\n         \r\n          \r\n          \r\n            </React.Fragment>)\r\n};\r\n\r\nexport default MeetWindow;\r\n\r\n","E:\\Microsoft ENgae\\reactFrontend\\client-app\\src\\components\\LandingPage.jsx",[],"E:\\Microsoft ENgae\\reactFrontend\\client-app\\src\\components\\popup.jsx",[],"E:\\Microsoft ENgae\\reactFrontend\\client-app\\src\\connectionServices\\Connection.js",["47","48","49","50"],"import io from 'socket.io-client';\r\nimport Peer from 'peerjs';\r\n\r\n\r\nclass SocketConnection {\r\n    ENDPOINT='https://engage-video-app.herokuapp.com/';\r\n    peers={};\r\n    videoContainer={};\r\n    currentStream=null;\r\n    mediaRecorder=null;\r\n    screenShareStatus=true;\r\n    screenPresenter=false;\r\n    currentScreenShareID=null;\r\n    recordedChunks=[];\r\n    constructor(props)\r\n    {   this.updatevalue=props.updatevalue;\r\n        this.roomId=props.roomId;\r\n        this.peer=this.newpeerconnection();\r\n        this.socket=io(this.ENDPOINT);\r\n        console.log('inside the connection :'+props.roomId);\r\n        this.socketEvent();\r\n        this.PeerEvent();\r\n        document.getElementById('screen-share').style.display = \"none\";\r\n       this.detectuseragent();\r\n        \r\n    }\r\n\r\n    newpeerconnection()\r\n    {\r\n        return new Peer({\r\n         config: {'iceServers': [\r\n             { urls: ['stun:stun.l.google.com:19302','stun:stun3.l.google.com:19302','stun:stun.stunprotocol.org:3478'] },\r\n             { urls: 'turn:3.108.196.62:3478', credential: 'AdFs$8A0!21',username:'nighthawk' }\r\n            \r\n           ]}\r\n \r\n        });\r\n    }\r\n\r\n    /************** ALL SOCKET & PEERJS REALTED FUCNTIONS *****************/\r\n \r\n   \r\n\r\n    socketEvent()\r\n    {\r\n        this.socket.on('screen-share',(ID)=>{\r\n            console.log('screen-share view for:',ID);\r\n            this.currentScreenShareID=ID;\r\n            this.screenShareStatus=!this.screenShareStatus;\r\n            this.updatevalue('screenShareStatus',this.screenShareStatus);\r\n           this.screenShareView(ID,this.videoContainer[ID]);\r\n        })\r\n\r\n\r\n        this.socket.on('screen-share-newUser',(sharingId,DestId)=>{\r\n            if(DestId===this.userId)\r\n            {\r\n                this.currentScreenShareID=sharingId;\r\n                this.screenShareStatus=!this.screenShareStatus;\r\n                this.updatevalue('screenShareStatus',this.screenShareStatus);\r\n                console.log(\"replace video ID for new user\",sharingId);\r\n\r\n                \r\n                var i = 0, howManyTimes = 11;\r\n                const g=()=>{\r\n                console.log(`waiting for sharefeed with ${i}`)\r\n                if(`${sharingId}` in this.videoContainer)\r\n                    {\r\n                        this.screenShareView(sharingId,this.videoContainer[sharingId]);\r\n                      \r\n                        i=20;\r\n                    }\r\n                i++;\r\n                if (i < howManyTimes) {\r\n                    setTimeout(g, 1000);\r\n                }\r\n                else if(i<20){\r\n                    alert('Oops! something went wrong join the meet again to view shared screen');\r\n                }\r\n                }\r\n    \r\n                g();\r\n               \r\n                 \r\n                \r\n               \r\n                \r\n            }\r\n        })\r\n\r\n\r\n        this.socket.on('normal-view',(ID)=>{\r\n            console.log('REvert view for:',ID);\r\n            this.screenShareStatus=!this.screenShareStatus;\r\n            this.updatevalue('screenShareStatus',this.screenShareStatus);\r\n            this.currentScreenShareID=null;\r\n            this.screenShareRevert(ID);\r\n        })\r\n\r\n        this.socket.on('user-left',(Id)=>{\r\n            if(this.currentScreenShareID===Id)\r\n            { this.screenShareStatus=!this.screenShareStatus;\r\n                this.updatevalue('screenShareStatus',this.screenShareStatus);\r\n                this.currentScreenShareID=null;\r\n                this.screenShareRevert(Id);\r\n            }\r\n            this.removeuser(Id);\r\n        })\r\n\r\n        this.socket.on('new-message',(userName,message)=>{\r\n          \r\n            this.updatevalue('Incomingmessage',{userName:userName, messageBody:message});  \r\n           \r\n        })\r\n\r\n        this.socket.on('newuserName',(userName)=>{\r\n            this.updatevalue('newuserName',{userName:userName,messageBody: ' joined chat'});\r\n        })\r\n\r\n\r\n        this.socket.on('userleftchat',(userName)=>{\r\n            this.updatevalue('newuserName',{userName:userName,messageBody: ' left chat'});\r\n        })\r\n       \r\n    }\r\n\r\n\r\n    PeerEvent()\r\n    {\r\n       \r\n        this.peer.on('open',(id) =>{\r\n            this.userId=id;\r\n            console.log('generated userId: '+id);\r\n            this.setlocalstream();\r\n            console.log(\"emitting joining room request\")\r\n         \r\n            var i = 0, howManyTimes = 11;\r\n\r\n            const f=()=>{\r\n            console.log(`waiting for joining room with ${i}`)\r\n            if(`${this.userId}` in this.videoContainer)\r\n                {\r\n                    this.socket.emit('joining-room', this.roomId, id);\r\n                  \r\n                    i=20;\r\n                }\r\n            i++;\r\n            if (i < howManyTimes) {\r\n                setTimeout(f, 1500);\r\n            }\r\n            else if(i<20){\r\n                /*if local stream cant be obtained*/\r\n                alert('Check camera/audio permissions and try again !');\r\n            }\r\n            }\r\n\r\n            f();\r\n           \r\n            \r\n           \r\n               \r\n            });\r\n\r\n\r\n        this.peer.on('error',(err)=>{\r\n           console.log('reconnecting to peer',err);\r\n           alert(\"Check your internet connection and re-try\");\r\n           this.peer.reconnect();\r\n       });\r\n      \r\n        \r\n    }\r\n     \r\n\r\n\r\n    setPeerListenres(stream)\r\n    {\r\n        console.log('peerlisteners set');\r\n        this.peer.on('call', (Call) =>{\r\n           \r\n            Call.answer(stream);\r\n            Call.on('stream',(externalstream)=>{\r\n             console.log('incoming stream');\r\n             this.peers[Call.metadata.userId]=Call.peerConnection;\r\n                this.addstream(externalstream,Call.metadata.userId);\r\n            })\r\n          \r\n        })\r\n    }\r\n \r\n     \r\n    /************END OF SOCKET & PEER HADNLING FUNCTIONS ***************/\r\n\r\n\r\n\r\n\r\n\r\n\r\n    /***************HANDLING NEW USER JOINED **************************/\r\n\r\n    newUserConnection()\r\n    {\r\n        this.socket.on('user-joined',(Id)=>{\r\n           \r\n            console.log(\"joined use:\"+Id);\r\n          \r\n            if(this.screenPresenter)\r\n            {\r\n                this.socket.emit('screen-share-newUser',this.userId,Id);\r\n                console.log('screen-share req sent for new user');\r\n            }\r\n                this.connectToUser(this.currentStream,Id);\r\n            \r\n            \r\n            \r\n        });\r\n      \r\n\r\n    }\r\n\r\n\r\n    connectToUser(stream,Id)\r\n        {\r\n       \r\n            const call=this.peer.call(Id,stream,{ metadata: { userId: this.userId } });\r\n            this.peer.on('error',(err)=>{\r\n                console.log(\"ERROR\"+err);\r\n            })\r\n            console.log('made call to '+ Id+ 'stream');\r\n            call.on('stream',(externalstream)=>{\r\n                console.log('connteced user returned stream',externalstream);\r\n                this.addstream(externalstream,Id);\r\n            })\r\n           \r\n            this.peers[Id]=call.peerConnection;\r\n          \r\n        }\r\n   \r\n    /*************END OF USER JOIED FUCNTIONS **********************/\r\n\r\n\r\n    \r\n   \r\n    /******************** AUDIO & VIDEO STREAM HANDLING **********************/\r\n\r\n\r\n\r\n    setlocalstream()\r\n    { \r\n        \r\n       this.getvideoaudio(true,true).then((stream)=> {\r\n            this.localstream=stream;\r\n            this.currentStream=stream;\r\n            //To mute audio and video on start\r\n            this.videotoggle(true);\r\n            this.mictoggle(true);\r\n\r\n            this.addstream(stream,this.userId);\r\n            this.setPeerListenres(this.currentStream);\r\n            this.newUserConnection();\r\n\r\n      })\r\n      .catch(function(err) { console.log(err.name + \": \" + err.message); });\r\n     \r\n    }\r\n\r\n\r\n    getvideoaudio(videostatus,micstatus)\r\n    {\r\n        const myNavigator = navigator.mediaDevices.getUserMedia || navigator.mediaDevices.webkitGetUserMedia || navigator.mediaDevices.mozGetUserMedia || navigator.mediaDevices.msGetUserMedia;\r\n        return myNavigator({video:videostatus,audio :micstatus});\r\n    }\r\n    \r\n    \r\n    addstream(stream,Id)\r\n   {\r\n       if(!this.videoContainer[Id])\r\n       {\r\n        const videogrid=document.getElementById('video-grid');\r\n      \r\n        this.videoContainer[Id]=stream;\r\n        const localcontainer = document.createElement('div');\r\n        const video = document.createElement('video');\r\n        video.srcObject =stream;\r\n        video.id=Id;\r\n        video.autoplay = true;\r\n        if (this.userId === Id) video.muted = true;\r\n        localcontainer.appendChild(video)\r\n        videogrid.append(localcontainer);\r\n        console.log(\"done creating video :\"+Id);\r\n       \r\n        \r\n       }\r\n      \r\n   }\r\n\r\n   removeuser(Id)\r\n   {\r\n    if(this.peers[Id])this.peers[Id].close();\r\n    delete this.videoContainer[Id];\r\n    const video = document.getElementById(Id);\r\n    if (video) video.remove();\r\n    delete this.peers[Id];\r\n    \r\n\r\n   }\r\n   \r\n\r\n\r\n   videotoggle(videostatus)\r\n   {\r\n       if(this.localstream)\r\n       {\r\n        this.localstream.getVideoTracks()[0].enabled =!videostatus; \r\n        this.updatevalue('videoStatus',!videostatus);\r\n       }\r\n   \r\n   }\r\n\r\n\r\n   mictoggle(micStatus)\r\n   {\r\n       if(this.localstream)\r\n       {    \r\n        this.localstream.getAudioTracks()[0].enabled =!micStatus;\r\n        this.updatevalue('micStatus',!micStatus);\r\n\r\n       }\r\n    \r\n   }\r\n\r\n/**********************END OF AUDIO & VIDEO HANDLING ****************/\r\n\r\n\r\n\r\n /********************* SCREENSHARE FUNCTIONS**********************/\r\n\r\n\r\n   screenShareView(Id,mediaStream)\r\n   {\r\n    var video = document.getElementById(Id);\r\n          if(video)\r\n          {\r\n            video.pause();\r\n            video.style.display=\"none\";\r\n         \r\n          }\r\n        const tmp=document.getElementById('screen-share');\r\n        tmp.style.display=\"inline\";\r\n        tmp.srcObject=mediaStream;\r\n        tmp.autoplay=true;\r\n        if(Id===this.userId)\r\n        {\r\n            tmp.muted=true;\r\n        }\r\n        console.log(\"video elemnt\",tmp);\r\n\r\n   }\r\n\r\n\r\n\r\n\r\n   screenShareRevert(Id)\r\n   {\r\n    const tmp=document.getElementById('screen-share');\r\n    if(tmp)\r\n    {\r\n        tmp.pause();\r\n        tmp.srcObject=null;\r\n        tmp.style.display=\"none\";\r\n    }\r\n    var video = document.getElementById(Id);\r\n          if(video)\r\n          {\r\n           \r\n            video.style.display=\"inline\";\r\n            video.play();\r\n          }\r\n  \r\n   \r\n    \r\n   }\r\n\r\n\r\n\r\n   screenSharetoggle(toggle)\r\n   { \r\n\r\n       if(toggle)\r\n       {\r\n        if(!this.screenShareStatus)\r\n                return;\r\n   \r\n    \r\n    \r\n           navigator.mediaDevices.getDisplayMedia({\r\n           video: {\r\n               cursor: \"always\"\r\n           },\r\n           audio: {\r\n               echoCancellation: true,\r\n               noiseSuppression: true\r\n\r\n           }\r\n            }).then((mediaStream)=>{\r\n        \r\n        \r\n        \r\n           mediaStream.getVideoTracks()[0].onended=()=>\r\n           {\r\n             \r\n           this.stopscreen();\r\n           }\r\n     \r\n           if(mediaStream)\r\n           {\r\n             this.socket.emit('screen-share',this.userId);\r\n             console.log('screen-share req sent');\r\n             this.currentStream=mediaStream;\r\n             this.screenShareStatus=!this.screenShareStatus;\r\n             this.updatevalue('screenShareStatus',this.screenShareStatus);\r\n             this.screenPresenter=!this.screenPresenter;\r\n             this.updatevalue('screenPresenter',this.screenPresenter);\r\n             this.screenShareView(this.userId,mediaStream);\r\n           \r\n\r\n           \r\n          \r\n            for (const [key, value] of Object.entries(this.peers)) {\r\n            \r\n                value.getSenders().map((sender) => {\r\n                \r\n                    if(sender.track.kind ===\"video\") {\r\n                        if(mediaStream.getVideoTracks().length > 0){\r\n                            sender.replaceTrack(mediaStream.getVideoTracks()[0]);\r\n                        }\r\n                    }\r\n                    \r\n                });\r\n                 }\r\n         \r\n             }}).catch((err)=>{\r\n             console.log(\"unable to get screen stream\"+err)\r\n            })\r\n\r\n       }\r\n       else\r\n       {\r\n            this.stopscreen();\r\n       }\r\n    \r\n           \r\n   }\r\n   \r\n \r\n    stopscreen()\r\n    {if(!this.screenPresenter)\r\n        return;\r\n        \r\n       this.socket.emit('normal-view',this.userId);\r\n       this.screenPresenter=!this.screenPresenter;\r\n       this.screenShareStatus=!this.screenShareStatus;\r\n       this.updatevalue('screenShareStatus',this.screenShareStatus);\r\n       this.updatevalue('screenPresenter',this.screenPresenter);\r\n        this.screenShareRevert(this.userId);\r\n        var video = document.getElementById(this.userId);\r\n        if(video)\r\n        {\r\n            video.pause();\r\n            video.srcObject = this.localstream;\r\n            video.play();\r\n        }\r\n         \r\n          this.currentStream=this.localstream\r\n        for (const [key, value] of Object.entries(this.peers)) {\r\n            \r\n            value.getSenders().map((sender) => {\r\n            \r\n                if(sender.track.kind === \"video\") {\r\n                    if(this.localstream.getVideoTracks().length > 0){\r\n                        sender.replaceTrack(this.localstream.getVideoTracks()[0]);\r\n                    }\r\n                }               \r\n            });\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    /***********************END OF SCREENSHARE FUNCTIONS  ********************************/\r\n\r\n\r\n\r\n\r\n\r\n\r\n    /***********************SCREEN RECORDING FUNCTIONS ***********************************/\r\n\r\n    recordScreen(recordStatus){\r\n\r\n        if(recordStatus)\r\n        {\r\n            navigator.mediaDevices.getDisplayMedia({\r\n                video: {\r\n                    cursor: \"always\"\r\n                },\r\n                audio: {\r\n                    echoCancellation: true,\r\n                    noiseSuppression: true\r\n     \r\n                }\r\n            }).then((mediaStream)=>{\r\n               \r\n             \r\n               this.mediaRecorder=new MediaRecorder(mediaStream);\r\n               this.startrecording();\r\n               mediaStream.getVideoTracks()[0].onended=()=>\r\n               {\r\n                 \r\n               this.endrecording();\r\n               }\r\n            \r\n            }).catch((err)=>{\r\n                console.log(\"unable to get screen stream for recording\"+err)\r\n            })\r\n            \r\n        }\r\n        else \r\n        {\r\n           \r\n            this.endrecording();\r\n           \r\n        }\r\n        \r\n    }\r\n\r\n\r\n    startrecording()\r\n    {   \r\n        this.updatevalue('recordStatus',false);\r\n       \r\n        console.log(\"starting\",this.mediaRecorder);\r\n      \r\n        this.mediaRecorder.ondataavailable=(event)=>{\r\n        \r\n        if (event.data.size > 0) {\r\n            this.recordedChunks.push(event.data);\r\n                }\r\n            }   \r\n\r\n        this.mediaRecorder.onstop=()=>{\r\n                const blob = new Blob(this.recordedChunks,{'type': 'video/mp4'});\r\n                console.log(this.recordedChunks.length);\r\n                const url = URL.createObjectURL(blob);\r\n                const a = document.createElement('a');\r\n                a.style.display = 'none';\r\n                a.href = url;\r\n                var today = new Date();\r\n                var date = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();\r\n                var time = today.getHours() + ':' + today.getMinutes() + ':' + today.getSeconds();\r\n                var dateTime = date+'-'+time;\r\n                a.download = 'Recording/'+dateTime+'.mp4';\r\n                document.body.appendChild(a);\r\n                a.click();\r\n                setTimeout(() => {\r\n                  document.body.removeChild(a);\r\n                  window.URL.revokeObjectURL(url);\r\n                }, 200);\r\n                this.recordedChunks=[];\r\n            }\r\n        this.mediaRecorder.start(1500);\r\n    }\r\n    \r\n    \r\n    endrecording()\r\n    {\r\n        if(this.mediaRecorder)\r\n        {\r\n            console.log(\"ending\",this.mediaRecorder);\r\n            this.updatevalue('recordStatus',true);\r\n            this.mediaRecorder.stop();\r\n            this.mediaRecorder=null;\r\n              \r\n        }\r\n       \r\n    }\r\n\r\n\r\n    /*********************END OF SCREENRECORDING FUCNTIONS ****************************/\r\n\r\n\r\n\r\n    /******************* CHAT FUNCTIONS *******************************/\r\n\r\n\r\n    broadcastmessage(newmessage,userName)\r\n    {\r\n        if(this.socket)\r\n        {\r\n            this.socket.emit('new-message',userName,newmessage);\r\n        }\r\n    }\r\n\r\n    newuserChat(name)\r\n    {\r\n     setTimeout(()=>{ if(this.socket)\r\n         {\r\n          this.socket.emit('newuserName',name);\r\n         }},1500);\r\n       \r\n    }\r\n\r\n    \r\n    /************************* END OF CHAT FUNCTIONS *********************/\r\n\r\n\r\n\r\n\r\n    detectuseragent()\r\n    {\r\n        if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|BB|PlayBook|IEMobile|Windows Phone|Kindle|Silk|Opera Mini/i.test(navigator.userAgent)) {\r\n            document.getElementById('options-button').style.display = \"none\";\r\n        }\r\n    }\r\n\r\n\r\n    exitcall(username)\r\n    {\r\n     \r\n     if(this.screenPresenter)\r\n     {\r\n        this.socket.emit('normal-view',this.userId);\r\n     }\r\n     this.socket.emit('userleftchat',username);\r\n     this.socket.disconnect();\r\n     if(this.videoContainer[this.userId])\r\n     {\r\n         const Tracks = this.videoContainer[this.userId].getTracks();\r\n         Tracks.forEach(element => {element.stop();\r\n             \r\n         });\r\n     }\r\n    \r\n        delete(this.videoContainer);\r\n        delete(this.peer);\r\n        delete(this.peers);\r\n       \r\n    }\r\n \r\n  \r\n    \r\n\r\n   \r\n \r\n}\r\n\r\n\r\n\r\n\r\nexport function createSocketConnectionInstance(settings={}) {\r\n    return  new SocketConnection(settings);\r\n}",{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":1,"column":16,"nodeType":"57","messageId":"58","endLine":1,"endColumn":24},{"ruleId":"55","severity":1,"message":"59","line":4,"column":5,"nodeType":"57","messageId":"58","endLine":4,"endColumn":11},{"ruleId":"55","severity":1,"message":"60","line":6,"column":7,"nodeType":"57","messageId":"58","endLine":6,"endColumn":17},{"ruleId":"61","severity":2,"message":"62","line":17,"column":16,"nodeType":"57","messageId":"63","endLine":17,"endColumn":26},{"ruleId":"55","severity":1,"message":"64","line":1,"column":26,"nodeType":"57","messageId":"58","endLine":1,"endColumn":35},{"ruleId":"55","severity":1,"message":"65","line":8,"column":14,"nodeType":"57","messageId":"58","endLine":8,"endColumn":20},{"ruleId":"66","severity":2,"message":"67","line":8,"column":33,"nodeType":"57","endLine":8,"endColumn":41},{"ruleId":"68","severity":1,"message":"69","line":60,"column":7,"nodeType":"70","endLine":60,"endColumn":9,"suggestions":"71"},{"ruleId":"55","severity":1,"message":"72","line":429,"column":25,"nodeType":"57","messageId":"58","endLine":429,"endColumn":28},{"ruleId":"73","severity":1,"message":"74","line":431,"column":49,"nodeType":"75","messageId":"76","endLine":431,"endColumn":51},{"ruleId":"55","severity":1,"message":"72","line":475,"column":21,"nodeType":"57","messageId":"58","endLine":475,"endColumn":24},{"ruleId":"73","severity":1,"message":"74","line":477,"column":45,"nodeType":"75","messageId":"76","endLine":477,"endColumn":47},"no-native-reassign",["77"],"no-negated-in-lhs",["78"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'socket' is assigned a value but never used.","'MeetWindow' is assigned a value but never used.","no-undef","'meetWindow' is not defined.","undef","'useEffect' is defined but never used.","'roomId' is assigned a value but never used.","react-hooks/rules-of-hooks","React Hook \"useState\" is called in function \"landingPage\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'micStatus', 'recordStatus', 'roomId', 'updatevalue', and 'videoStatus'. Either include them or remove the dependency array.","ArrayExpression",["79"],"'key' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation",{"desc":"80","fix":"81"},"Update the dependencies array to be: [micStatus, recordStatus, roomId, updatevalue, videoStatus]",{"range":"82","text":"83"},[2165,2167],"[micStatus, recordStatus, roomId, updatevalue, videoStatus]"]